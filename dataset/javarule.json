{
  "dialogues": [
    {
      "id": "erp-java-001",
      "conversations": [
        {
          "role": "user",
          "content": "我需要为ERP系统添加一个新的库存管理功能，应该如何定义模块和包结构？"
        },
        {
          "role": "assistant",
          "content": "对于库存管理功能，你应该使用WM（Warehouse Management）作为模块标识。\n\n包结构应遵循以下规范：\n1. 基本包路径：`com.company.erp.wm`\n2. 内部结构：\n   - `com.company.erp.wm.entity` - 存放实体类\n   - `com.company.erp.wm.formula` - 存放业务逻辑处理类\n   - `com.company.erp.wm.registry` - 存放注册器类\n   - `com.company.erp.wm.common` - 存放公共组件\n\n这符合我们的分层架构设计，WM模块属于业务层(erp-supplychain-all)，需要依赖基础层(erp-basis-all)的功能。"
        },
        {
          "role": "user",
          "content": "库存管理相关的数据库表应该如何命名？"
        },
        {
          "role": "assistant",
          "content": "库存管理(WM)模块的数据库表命名应遵循以下规范：\n\n1. 模块表前缀：`EWM_`\n   - 例如：`EWM_StockHead` (库存主表)\n   - 例如：`EWM_StockMovement` (库存移动表)\n\n2. 模块缓存表前缀：`EGWM_`\n   - 例如：`EGWM_WarehouseConfig` (仓库配置缓存表)\n\n3. 表名示例：\n   - `EWM_InventoryHead` - 库存单据头表\n   - `EWM_InventoryItem` - 库存单据明细表\n   - `EWM_StockBalance` - 库存余额表\n   - `EGWM_LocationMaster` - 库位主数据缓存表\n\n记住，表名必须符合模块前缀规则，并使用英文名称准确描述表的业务用途。"
        },
        {
          "role": "user",
          "content": "我想开发一个库存移动的业务功能，Formula类应该如何设计？"
        },
        {
          "role": "assistant",
          "content": "库存移动功能的Formula类设计应遵循以下规范：\n\n```java\npackage com.company.erp.wm.formula;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.company.erp.function.EntityContextAction;\nimport com.company.erp.wm.entity.StockMovement;\n\npublic class StockMovementFormula extends EntityContextAction {\n    private static final Logger logger = LoggerFactory.getLogger(StockMovementFormula.class);\n\n    public StockMovementFormula(IMidContext context) throws Throwable {\n        super(context);\n    }\n    \n    /**\n     * 保存库存移动单据\n     * @param stockMovement 库存移动实体\n     * @return 保存后的实体ID\n     * @throws Throwable 处理异常\n     */\n    public Long save(StockMovement stockMovement) throws Throwable {\n        logger.info(\"开始保存库存移动单据\");\n        \n        // 1. 验证必填字段\n        validateRequiredFields(stockMovement);\n        \n        // 2. 生成单据编号\n        if (stockMovement.getDocumentNumber() == null) {\n            String docNumber = DocumentFunction.generateDocumentNumber(\n                getMidContext(),\n                \"WM\",     // 模块代码\n                \"SM\"      // 单据类型 StockMovement\n            );\n            stockMovement.setDocumentNumber(docNumber);\n        }\n        \n        // 3. 保存主表数据\n        Long objectID = getMidContext().saveObject(stockMovement);\n        \n        // 4. 保存明细数据（如果有）\n        saveDetails(stockMovement);\n        \n        // 5. 更新单据状态\n        StatusFormula statusFormula = new StatusFormula(getMidContext());\n        statusFormula.changeStatus(\n            true,\n            \"WM_StockMovement\",\n            \"SaveStockMovement\",\n            objectID,\n            getStatusProfileID(),\n            null\n        );\n        \n        logger.info(\"库存移动单据保存完成，ID: {}\", objectID);\n        return objectID;\n    }\n    \n    /**\n     * 验证必填字段\n     * @param stockMovement 库存移动实体\n     * @throws Throwable 验证失败抛出异常\n     */\n    private void validateRequiredFields(StockMovement stockMovement) throws Throwable {\n        if (stockMovement.getWarehouseID() == null) {\n            throw new Throwable(\"仓库不能为空\");\n        }\n        \n        if (stockMovement.getMoveDate() == null) {\n            throw new Throwable(\"移动日期不能为空\");\n        }\n        \n        // 其他业务验证...\n    }\n    \n    /**\n     * 保存明细数据\n     * @param stockMovement 库存移动实体\n     * @throws Throwable 处理异常\n     */\n    private void saveDetails(StockMovement stockMovement) throws Throwable {\n        // 明细数据保存逻辑...\n    }\n    \n    // 其他业务方法...\n}\n```\n\n同时，需要在WM模块的注册器中注册这个Formula类：\n\n```java\npackage com.company.erp.wm.registry;\n\nimport com.company.erp.function.IExtendContextActionRegistry;\nimport com.company.erp.wm.formula.StockMovementFormula;\n\npublic class WMContextActionRegistry implements IExtendContextActionRegistry {\n    @Override\n    public Class<?>[] getContextActions() {\n        Class<?>[] contextActions = new Class<?>[]{\n            StockMovementFormula.class,\n            // ... 其他WM模块Formula类\n        };\n        return contextActions;\n    }\n}\n```\n\n并确保在META-INF/services目录下的接口文件中添加注册器：\n```\ncom.company.erp.wm.registry.WMContextActionRegistry\n```"
        }
      ]
    },
    {
      "id": "erp-java-002",
      "conversations": [
        {
          "role": "user",
          "content": "如何设计ERP系统中的实体类？以采购订单为例。"
        },
        {
          "role": "assistant",
          "content": "在ERP系统中设计采购订单(PurchaseOrder)实体类应遵循以下规范：\n\n```java\npackage com.company.erp.mm.entity;\n\nimport java.math.BigDecimal;\nimport java.util.Date;\nimport java.util.List;\n\n/**\n * 采购订单实体类\n */\npublic class PurchaseOrder {\n    // 系统字段常量定义\n    public static final String FIELD_OID = \"OID\";\n    public static final String FIELD_SOID = \"SOID\";\n    public static final String FIELD_POID = \"POID\";\n    public static final String FIELD_STATUS = \"Status\";\n    \n    // 业务字段常量定义\n    public static final String FIELD_DOC_NUMBER = \"DocumentNumber\";\n    public static final String FIELD_VENDOR_ID = \"VendorID\";\n    public static final String FIELD_ORDER_DATE = \"OrderDate\";\n    public static final String FIELD_CURRENCY = \"Currency\";\n    public static final String FIELD_TOTAL_AMOUNT = \"TotalAmount\";\n    \n    // 系统字段\n    private Long oid;\n    private Long soid;\n    private Long poid;\n    private Integer status;\n    private Long creator;\n    private Date createTime;\n    private Long modifier;\n    private Date modifyTime;\n    \n    // 业务字段\n    private String documentNumber;\n    private Long vendorID;\n    private String vendorName;\n    private Date orderDate;\n    private String currency;\n    private BigDecimal totalAmount;\n    \n    // 明细列表（不持久化，仅用于传输）\n    private List<PurchaseOrderItem> items;\n    \n    // 构造函数\n    public PurchaseOrder() {\n    }\n    \n    // getter/setter方法（支持链式调用）\n    public Long getOid() {\n        return oid;\n    }\n    \n    public PurchaseOrder setOid(Long oid) {\n        this.oid = oid;\n        return this;\n    }\n    \n    public String getDocumentNumber() {\n        return documentNumber;\n    }\n    \n    public PurchaseOrder setDocumentNumber(String documentNumber) {\n        this.documentNumber = documentNumber;\n        return this;\n    }\n    \n    public Long getVendorID() {\n        return vendorID;\n    }\n    \n    public PurchaseOrder setVendorID(Long vendorID) {\n        this.vendorID = vendorID;\n        return this;\n    }\n    \n    // 其他getter/setter方法...\n}\n```\n\n该实体类设计遵循以下规范：\n1. 放在对应业务模块的entity包下（com.company.erp.mm.entity）\n2. 使用英文名称作为类名（PurchaseOrder）\n3. 字段常量定义为public static final\n4. getter/setter方法支持链式调用\n5. 包含系统字段和业务字段\n6. 包含适当的JavaDoc注释"
        },
        {
          "role": "user",
          "content": "采购订单明细实体类应该怎么设计？"
        },
        {
          "role": "assistant",
          "content": "采购订单明细(PurchaseOrderItem)实体类设计应遵循以下规范：\n\n```java\npackage com.company.erp.mm.entity;\n\nimport java.math.BigDecimal;\nimport java.util.Date;\n\n/**\n * 采购订单明细实体类\n */\npublic class PurchaseOrderItem {\n    // 系统字段常量定义\n    public static final String FIELD_OID = \"OID\";\n    public static final String FIELD_SOID = \"SOID\";\n    public static final String FIELD_POID = \"POID\";\n    \n    // 业务字段常量定义\n    public static final String FIELD_LINE_NUMBER = \"LineNumber\";\n    public static final String FIELD_MATERIAL_ID = \"MaterialID\";\n    public static final String FIELD_QUANTITY = \"Quantity\";\n    public static final String FIELD_UNIT_PRICE = \"UnitPrice\";\n    public static final String FIELD_AMOUNT = \"Amount\";\n    \n    // 系统字段\n    private Long oid;\n    private Long soid;  // 关联主表ID\n    private Long poid;\n    private Long creator;\n    private Date createTime;\n    private Long modifier;\n    private Date modifyTime;\n    \n    // 业务字段\n    private Integer lineNumber;  // 行号\n    private Long materialID;     // 物料ID\n    private String materialCode; // 物料编码\n    private String materialName; // 物料名称\n    private String unit;         // 单位\n    private BigDecimal quantity;  // 数量（精度：16,3）\n    private BigDecimal unitPrice; // 单价（精度：16,2）\n    private BigDecimal amount;    // 金额（精度：16,2）\n    private Date deliveryDate;   // 交货日期\n    private String remark;       // 备注\n    \n    // 构造函数\n    public PurchaseOrderItem() {\n    }\n    \n    // getter/setter方法（支持链式调用）\n    public Long getOid() {\n        return oid;\n    }\n    \n    public PurchaseOrderItem setOid(Long oid) {\n        this.oid = oid;\n        return this;\n    }\n    \n    public Long getSoid() {\n        return soid;\n    }\n    \n    public PurchaseOrderItem setSoid(Long soid) {\n        this.soid = soid;\n        return this;\n    }\n    \n    public Integer getLineNumber() {\n        return lineNumber;\n    }\n    \n    public PurchaseOrderItem setLineNumber(Integer lineNumber) {\n        this.lineNumber = lineNumber;\n        return this;\n    }\n    \n    public Long getMaterialID() {\n        return materialID;\n    }\n    \n    public PurchaseOrderItem setMaterialID(Long materialID) {\n        this.materialID = materialID;\n        return this;\n    }\n    \n    // 其他getter/setter方法...\n}\n```\n\n明细实体类设计要点：\n1. 放在与主表实体相同的包下（com.company.erp.mm.entity）\n2. 使用英文名称作为类名（PurchaseOrderItem）\n3. 包含关联主表ID的字段（soid）\n4. 包含行号字段（lineNumber）用于排序\n5. 包含数量、价格等关键业务字段，注意数值精度\n6. getter/setter方法支持链式调用\n7. 遵循统一的字段常量定义方式\n\n这种设计符合ERP系统的实体类标准，确保了实体类的一致性和可维护性。"
        },
        {
          "role": "user",
          "content": "如何在XML中定义采购订单的DataObject？"
        },
        {
          "role": "assistant",
          "content": "采购订单的DataObject XML定义应遵循以下规范：\n\n```xml\n<DataObject Key=\"MM_PurchaseOrder\" Caption=\"采购订单\" PrimaryTableKey=\"EMM_PurchaseOrderHead\" PrimaryType=\"Entity\" Version=\"1\">\n    <TableCollection>\n        <!-- 采购订单主表定义 -->\n        <Table Key=\"EMM_PurchaseOrderHead\" Caption=\"采购订单头表\" IndexPrefix=\"EMM_PurchaseOrderHead\">\n            <!-- 系统字段 -->\n            <Column Key=\"OID\" Caption=\"对象标识\" DataType=\"Long\" />\n            <Column Key=\"SOID\" Caption=\"主对象标识\" DataType=\"Long\" />\n            <Column Key=\"POID\" Caption=\"父对象标识\" DataType=\"Long\" />\n            <Column Key=\"VERID\" Caption=\"对象版本\" DataType=\"Integer\" />\n            <Column Key=\"Status\" Caption=\"状态\" DataType=\"Integer\" />\n            <Column Key=\"Creator\" Caption=\"制单人\" DataType=\"Long\" />\n            <Column Key=\"CreateTime\" Caption=\"制单时间\" DataType=\"DateTime\" />\n            <Column Key=\"Modifier\" Caption=\"修改人\" DataType=\"Long\" />\n            <Column Key=\"ModifyTime\" Caption=\"修改时间\" DataType=\"DateTime\" />\n            \n            <!-- 业务字段 -->\n            <Column Key=\"DocumentNumber\" Caption=\"采购订单号\" DataType=\"Varchar\" Length=\"20\" />\n            <Column Key=\"OrderDate\" Caption=\"订单日期\" DataType=\"DateTime\" />\n            <Column Key=\"VendorID\" Caption=\"供应商ID\" DataType=\"Long\" />\n            <Column Key=\"VendorCode\" Caption=\"供应商编码\" DataType=\"Varchar\" Length=\"20\" />\n            <Column Key=\"VendorName\" Caption=\"供应商名称\" DataType=\"Varchar\" Length=\"100\" />\n            <Column Key=\"PurchaserID\" Caption=\"采购员ID\" DataType=\"Long\" />\n            <Column Key=\"PurchaserName\" Caption=\"采购员\" DataType=\"Varchar\" Length=\"50\" />\n            <Column Key=\"DepartmentID\" Caption=\"部门ID\" DataType=\"Long\" />\n            <Column Key=\"DepartmentName\" Caption=\"部门\" DataType=\"Varchar\" Length=\"50\" />\n            <Column Key=\"Currency\" Caption=\"币种\" DataType=\"Varchar\" Length=\"10\" />\n            <Column Key=\"ExchangeRate\" Caption=\"汇率\" DataType=\"Numeric\" Precision=\"16\" Scale=\"6\" />\n            <Column Key=\"TotalAmount\" Caption=\"总金额\" DataType=\"Numeric\" Precision=\"16\" Scale=\"2\" />\n            <Column Key=\"DeliveryDate\" Caption=\"交货日期\" DataType=\"DateTime\" />\n            <Column Key=\"PaymentTerms\" Caption=\"付款条件\" DataType=\"Varchar\" Length=\"100\" />\n            <Column Key=\"Remark\" Caption=\"备注\" DataType=\"Varchar\" Length=\"500\" />\n        </Table>\n        \n        <!-- 采购订单明细表定义 -->\n        <Table Key=\"EMM_PurchaseOrderItem\" TableMode=\"Detail\" Caption=\"采购订单明细\" IndexPrefix=\"EMM_PurchaseOrderItem\">\n            <!-- 系统字段 -->\n            <Column Key=\"OID\" Caption=\"对象标识\" DataType=\"Long\" />\n            <Column Key=\"SOID\" Caption=\"主对象标识\" DataType=\"Long\" />\n            <Column Key=\"POID\" Caption=\"父对象标识\" DataType=\"Long\" />\n            <Column Key=\"VERID\" Caption=\"对象版本\" DataType=\"Integer\" />\n            <Column Key=\"Creator\" Caption=\"制单人\" DataType=\"Long\" />\n            <Column Key=\"CreateTime\" Caption=\"制单时间\" DataType=\"DateTime\" />\n            <Column Key=\"Modifier\" Caption=\"修改人\" DataType=\"Long\" />\n            <Column Key=\"ModifyTime\" Caption=\"修改时间\" DataType=\"DateTime\" />\n            \n            <!-- 业务字段 -->\n            <Column Key=\"LineNumber\" Caption=\"行号\" DataType=\"Integer\" />\n            <Column Key=\"MaterialID\" Caption=\"物料ID\" DataType=\"Long\" />\n            <Column Key=\"MaterialCode\" Caption=\"物料编码\" DataType=\"Varchar\" Length=\"50\" />\n            <Column Key=\"MaterialName\" Caption=\"物料名称\" DataType=\"Varchar\" Length=\"100\" />\n            <Column Key=\"Specification\" Caption=\"规格型号\" DataType=\"Varchar\" Length=\"100\" />\n            <Column Key=\"Unit\" Caption=\"单位\" DataType=\"Varchar\" Length=\"20\" />\n            <Column Key=\"Quantity\" Caption=\"数量\" DataType=\"Numeric\" Precision=\"16\" Scale=\"3\" />\n            <Column Key=\"UnitPrice\" Caption=\"单价\" DataType=\"Numeric\" Precision=\"16\" Scale=\"2\" />\n            <Column Key=\"Amount\" Caption=\"金额\" DataType=\"Numeric\" Precision=\"16\" Scale=\"2\" />\n            <Column Key=\"TaxRate\" Caption=\"税率\" DataType=\"Numeric\" Precision=\"16\" Scale=\"2\" />\n            <Column Key=\"TaxAmount\" Caption=\"税额\" DataType=\"Numeric\" Precision=\"16\" Scale=\"2\" />\n            <Column Key=\"DeliveryDate\" Caption=\"交货日期\" DataType=\"DateTime\" />\n            <Column Key=\"WarehouseID\" Caption=\"仓库ID\" DataType=\"Long\" />\n            <Column Key=\"WarehouseName\" Caption=\"仓库\" DataType=\"Varchar\" Length=\"50\" />\n            <Column Key=\"Remark\" Caption=\"备注\" DataType=\"Varchar\" Length=\"200\" />\n        </Table>\n    </TableCollection>\n</DataObject>\n```\n\nDataObject定义要点：\n\n1. DataObject命名规则：\n   - Key属性：`MM_PurchaseOrder`（模块_实体）\n   - PrimaryTableKey：`EMM_PurchaseOrderHead`（表前缀E + 模块标识MM + 实体名Head）\n\n2. 表命名规则：\n   - 主表Key：`EMM_PurchaseOrderHead`\n   - 明细表Key：`EMM_PurchaseOrderItem`\n   - 明细表需设置TableMode=\"Detail\"\n\n3. 系统字段：\n   - 包含必要的系统字段（OID, SOID, POID, VERID等）\n   - 包含创建/修改相关的审计字段\n\n4. 数据类型规范：\n   - 字符串：DataType=\"Varchar\" Length=\"长度值\"\n   - 整数：DataType=\"Integer\"\n   - 长整数：DataType=\"Long\"\n   - 数量小数：DataType=\"Numeric\" Precision=\"16\" Scale=\"3\"\n   - 金额小数：DataType=\"Numeric\" Precision=\"16\" Scale=\"2\"\n   - 日期时间：DataType=\"DateTime\"\n\n5. 索引前缀：与表Key保持一致\n\n该DataObject定义符合ERP系统的标准规范，确保了数据结构的一致性和可维护性。"
        }
      ]
    },
    {
      "id": "erp-java-003",
      "conversations": [
        {
          "role": "user",
          "content": "请解释一下ERP系统中Formula类的作用和开发规范。"
        },
        {
          "role": "assistant",
          "content": "在ERP系统中，Formula类是业务逻辑处理的核心组件，主要负责实现特定业务领域的功能逻辑。以下是Formula类的作用和开发规范：\n\n## Formula类的作用\n\n1. **业务逻辑封装**：将特定业务领域的逻辑封装在专门的Formula类中\n2. **状态管理**：负责管理业务对象的状态转换\n3. **数据验证**：执行业务规则验证和数据完整性检查\n4. **事务处理**：在业务上下文中执行事务性操作\n5. **业务流程控制**：控制业务处理流程，如审核、取消等\n\n## Formula类开发规范\n\n### 1. 基本结构\n\n```java\npublic class 业务Formula extends EntityContextAction {\n    private static final Logger logger = LoggerFactory.getLogger(业务Formula.class);\n\n    public 业务Formula(IMidContext context) throws Throwable {\n        super(context);\n    }\n\n    // 业务方法实现\n}\n```\n\n### 2. 命名规范\n- 命名规则：`实体名 + Formula`\n- 例如：`PurchaseOrderFormula`, `SalesOrderFormula`\n\n### 3. 包路径规范\n- 必须放在对应业务模块的formula包下\n- 例如：`com.company.erp.mm.formula.PurchaseOrderFormula`\n\n### 4. 继承关系\n- 必须继承`EntityContextAction`基类\n- 通过基类获取上下文和核心功能\n\n### 5. 构造函数\n- 必须包含接收`IMidContext`参数的构造函数\n- 必须处理异常（throws Throwable）\n\n### 6. 业务方法规范\n- 方法必须抛出Throwable异常\n- 必须包含日志记录\n- 必须进行参数验证\n- 必须进行权限检查\n- 必须维护单据状态\n\n### 7. 状态管理示例\n```java\n// 状态变更示例\nStatusFormula statusFormula = new StatusFormula(getMidContext());\nstatusFormula.changeStatus(\n    true,                   // 是否更新文档\n    \"业务对象类型\",          // 如：MM_PurchaseOrder\n    \"业务事务代码\",          // 如：SavePurchaseOrder\n    objectID,              // 对象ID\n    statusProfileID,       // 状态配置ID\n    statusInfo             // 状态信息\n);\n```\n\n### 8. 单据编号生成规范\n```java\n// 生成单据编号\nString docNumber = DocumentFunction.generateDocumentNumber(\n    getMidContext(),\n    \"MM\",     // 模块代码\n    \"PO\"      // 单据类型\n);\n```\n\n### 9. 模块注册\n- 每个Formula类必须在对应模块的ContextActionRegistry中注册\n- 通过SPI机制向系统注册Formula类\n\n遵循这些规范可以确保业务逻辑处理的一致性、可维护性和可扩展性，使ERP系统保持良好的架构特性。"
        }
      ]
    }
  ]
} 
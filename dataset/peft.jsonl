{"id": "MOD-001", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建FI模块的银行账户实体类，要求：\n1. 包路径com.company.erp.fi.entity\n2. 继承AbstractBillEntity\n3. 包含accountNumber字段", "output": "package com.company.erp.fi.entity;\n\npublic class FI_BankAccount extends AbstractBillEntity {\n    public static final String AccountNumber = \"AccountNumber\";\n    \n    public String getAccountNumber() throws Throwable {\n        return value_String(AccountNumber);\n    }\n    \n    public FI_BankAccount setAccountNumber(String value) throws Throwable {\n        setValue(AccountNumber, value);\n        return this;\n    }\n}"}

{"id": "MOD-002", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下代码的3处规范问题：\npackage com.company.ERP.MM;\npublic class purchaseOrder {\n    String customer_id;\n}", "output": "1. 包名应全小写(com.company.erp.mm)\n2. 类名应大驼峰(PurchaseOrder)\n3. 字段名应使用PascalCase(customerId)"}

{"messages": [{"role": "user", "content": "如何在CO模块创建成本分配Formula类？"}, {"role": "assistant", "content": "需要满足：\n1. 包路径com.company.erp.co.formula\n2. 继承EntityContextAction\n3. 实现calculate方法"}, {"role": "user", "content": "public class CostFormula {\n    void calc() {}\n}"}, {"role": "assistant", "content": "需修正：\n1. 添加package声明\n2. 继承EntityContextAction\n3. 方法抛出Throwable\n完整代码：\npackage com.company.erp.co.formula;\n\npublic class CostAllocationFormula extends EntityContextAction {\n    public void calculate() throws Throwable {\n        // 业务逻辑\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-004", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建基础层的日期工具类，要求：\n1. 包路径com.company.erp.basis.utils\n2. 包含formatISO8601静态方法\n3. 使用final修饰类", "output": "package com.company.erp.basis.utils;\n\npublic final class DateUtils {\n    public static String formatISO8601(Date date) {\n        return new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\").format(date);\n    }\n}"}

{"id": "MOD-005", "type": "single-turn", "case": "positive", "language": "java", "instruction": "为SD模块创建销售订单注册器，要求：\n1. 实现IExtendContextActionRegistry\n2. 注册SalesOrderFormula\n3. 类名符合规范", "output": "package com.company.erp.sd.registry;\n\npublic class SDContextActionRegistry implements IExtendContextActionRegistry {\n    @Override\n    public Class<?>[] getContextActions() {\n        return new Class<?>[]{SalesOrderFormula.class};\n    }\n}"}

{"messages": [{"role": "user", "content": "创建物料管理的全局缓存表"}, {"role": "assistant", "content": "请确认：\n1. 表名前缀使用EGMM_\n2. 包含materialCode字段\n3. 使用Numeric类型存储数量"}, {"role": "user", "content": "CREATE TABLE MM_CACHE (code VARCHAR, qty NUMBER)"}, {"role": "assistant", "content": "需要修正：\n1. 表名应为EGMM_MaterialCache\n2. 字段命名使用PascalCase\n3. 数量类型指定精度\n正确DDL：\nCREATE TABLE EGMM_MaterialCache (\n    MaterialCode VARCHAR(50) PRIMARY KEY,\n    StockQty NUMERIC(16,3)\n)"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-007", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建PM模块的设备维护服务类，要求：\n1. 包路径com.company.erp.pm.service\n2. 包含scheduleMaintenance方法\n3. 使用@Service注解", "output": "package com.company.erp.pm.service;\n\n@Service\npublic class PM_MaintenanceService {\n    public void scheduleMaintenance() {\n        // 设备维护调度逻辑\n    }\n}"}

{"id": "MOD-008", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下XML配置的2处错误：\n<DataObject Key=\"mm_material\" PrimaryTableKey=\"Material\">", "output": "1. Key值应使用模块前缀(MM_Material)\n2. 表名应使用EMM_前缀(EMM_Material)"}

{"messages": [{"role": "user", "content": "如何正确实现跨模块调用？"}, {"role": "assistant", "content": "应通过接口抽象：\n1. 在基础层定义公共接口\n2. 业务层实现接口\n3. 使用@Autowired注入"}, {"role": "user", "content": "class OrderService {\n    FinanceService finance;\n}"}, {"role": "assistant", "content": "需要修正：\n1. 使用接口类型FinanceService\n2. 添加@Autowired注解\n3. 确保FinanceService在正确模块\n正确实现：\n@Autowired\nprivate FinanceService financeService;"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-010", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建RE模块的不动产实体类，要求：\n1. 包含propertyCode字段\n2. 实现链式setter\n3. 包路径符合规范", "output": "package com.company.erp.re.entity;\n\npublic class RE_Property extends AbstractBillEntity {\n    public static final String PropertyCode = \"PropertyCode\";\n    \n    public RE_Property setPropertyCode(String value) throws Throwable {\n        setValue(PropertyCode, value);\n        return this;\n    }\n}"}

{"id": "MOD-011", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建CO模块的成本分配异常类，要求：\n1. 包路径com.company.erp.co.exception\n2. 继承CoreException\n3. 包含错误代码字段", "output": "package com.company.erp.co.exception;\n\npublic class CostAllocationException extends CoreException {\n    private final String errorCode;\n    \n    public CostAllocationException(String errorCode, String message) {\n        super(message);\n        this.errorCode = errorCode;\n    }\n}"}

{"messages": [{"role": "user", "content": "需要给AM模块添加资产折旧计算服务"}, {"role": "assistant", "content": "请确认：\n1. 包路径com.company.erp.am.service\n2. 使用@Service注解\n3. 包含calculateDepreciation方法"}, {"role": "user", "content": "@Service\nclass DepreciationService {\n    void calcDepr() {}\n}"}, {"role": "assistant", "content": "需要修正：\n1. 类名应带模块前缀AM_\n2. 方法名应完整\n3. 添加异常声明\n完整代码：\npackage com.company.erp.am.service;\n\n@Service\npublic class AM_DepreciationService {\n    public void calculateDepreciation() throws CostAllocationException {\n        // 折旧计算逻辑\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-013", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下代码的3处架构问题：\npackage com.company.erp.service;\npublic class OrderService {\n    @Autowired\n    BasisConfig config;\n}", "output": "1. 包路径未体现模块标识(sd/service)\n2. 基础层配置类不应被业务层直接依赖\n3. 类名缺少模块前缀SD_"}

{"id": "MOD-014", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建配置层的解决方案扩展类，要求：\n1. 包路径com.company.erp.solution.ext\n2. 实现SolutionExtension接口\n3. 包含loadConfig方法", "output": "package com.company.erp.solution.ext;\n\npublic class CustomSolutionExtension implements SolutionExtension {\n    @Override\n    public void loadConfig(String configPath) {\n        // 配置加载逻辑\n    }\n}"}

{"messages": [{"role": "user", "content": "如何正确实现基础层到业务层的接口暴露？"}, {"role": "assistant", "content": "应遵循：\n1. 在basis模块定义接口\n2. 业务层实现接口\n3. 通过@Autowired注入"}, {"role": "user", "content": "public class OrderServiceImpl implements OrderService {}"}, {"role": "assistant", "content": "需要修正：\n1. 接口应定义在basis模块\n2. 实现类应放在业务模块\n正确结构：\n// basis模块\npackage com.company.erp.basis.service;\npublic interface OrderService {}\n\n// sd模块\npackage com.company.erp.sd.service;\npublic class SD_OrderServiceImpl implements OrderService {}"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-016", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建WM模块的库存校验Formula类，要求：\n1. 继承EntityContextAction\n2. 包含validateStock方法\n3. 抛出InventoryException", "output": "package com.company.erp.wm.formula;\n\npublic class InventoryValidationFormula extends EntityContextAction {\n    public void validateStock() throws InventoryException {\n        // 库存校验逻辑\n    }\n}"}

{"id": "MOD-017", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下XML配置的2处错误：\n<Form Key=\"sales_order\" RefObjectKey=\"Order\">", "output": "1. Key值应使用模块前缀(SD_SalesOrder)\n2. RefObjectKey应匹配DataObject的Key(SD_SalesOrder)"}

{"messages": [{"role": "user", "content": "创建HCM模块的员工考勤服务"}, {"role": "assistant", "content": "需满足：\n1. 包路径com.company.erp.hcm.service\n2. 包含recordAttendance方法\n3. 使用事务注解"}, {"role": "user", "content": "@Service\nclass Attendance {\n    void record() {}\n}"}, {"role": "assistant", "content": "需要修正：\n1. 类名应带HCM_前缀\n2. 方法名完整\n3. 添加@Transactional\n正确代码：\npackage com.company.erp.hcm.service;\n\n@Service\n@Transactional\npublic class HCM_AttendanceService {\n    public void recordAttendance() {}\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-019", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建FI模块的支付网关适配器，要求：\n1. 包路径com.company.erp.fi.integration\n2. 实现PaymentGateway接口\n3. 使用@Component注解", "output": "package com.company.erp.fi.integration;\n\n@Component\npublic class FI_PaymentAdapter implements PaymentGateway {\n    @Override\n    public void processPayment() {\n        // 支付处理逻辑\n    }\n}"}

{"id": "MOD-020", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建跨模块使用的公共DTO，要求：\n1. 包路径com.company.erp.basis.dto\n2. 实现Serializable\n3. 包含resultCode和message字段", "output": "package com.company.erp.basis.dto;\n\npublic class CommonResponse implements Serializable {\n    private String resultCode;\n    private String message;\n    \n    // Getter/Setter...\n}"}

{"id": "PKG-021", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建FI模块的汇率服务接口，要求：\n1. 包路径com.company.erp.fi.service\n2. 使用@FunctionalInterface注解\n3. 放在服务层目录", "output": "package com.company.erp.fi.service;\n\n@FunctionalInterface\npublic interface FI_ExchangeRateService {\n    BigDecimal getRate(String currencyCode);\n}"}

{"messages": [{"role": "user", "content": "在MM模块创建物料分类实体类"}, {"role": "assistant", "content": "需满足：\n1. 包路径com.company.erp.mm.entity\n2. 包含categoryCode字段\n3. 继承BaseEntity"}, {"role": "user", "content": "public class Category {\n    String code;\n}"}, {"role": "assistant", "content": "需要修正：\n1. 添加package声明\n2. 字段名规范化为categoryCode\n3. 继承正确基类\n完整代码：\npackage com.company.erp.mm.entity;\n\npublic class MM_MaterialCategory extends AbstractBillEntity {\n    public static final String CategoryCode = \"CategoryCode\";\n    // getter/setter..."}], "type": "multi-turn", "case": "negative"}

{"id": "PKG-023", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下包结构的3处错误：\npackage com.company.ERP.sd.formula;", "output": "1. 公司域名应小写(com.company.erp)\n2. 模块标识应小写(sd)\n3. formula应放在sd模块下的formula包"}

{"id": "PKG-024", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建CO模块的预算控制异常类，要求：\n1. 包路径com.company.erp.co.exception\n2. 继承CoreException\n3. 包含错误级别字段", "output": "package com.company.erp.co.exception;\n\npublic class BudgetControlException extends CoreException {\n    private final String severityLevel;\n    \n    public BudgetControlException(String message, String severityLevel) {\n        super(message);\n        this.severityLevel = severityLevel;\n    }\n}"}

{"messages": [{"role": "user", "content": "如何组织PM模块的注册器类？"}, {"role": "assistant", "content": "应满足：\n1. 包路径com.company.erp.pm.registry\n2. 实现IExtendContextActionRegistry\n3. 注册PM模块Formula类"}, {"role": "user", "content": "public class Registry {\n    Class<?>[] actions;\n}"}, {"role": "assistant", "content": "需要修正：\n1. 类名应为PMContextActionRegistry\n2. 实现接口方法\n3. 指定注册类\n完整代码：\npackage com.company.erp.pm.registry;\n\npublic class PMContextActionRegistry implements IExtendContextActionRegistry {\n    @Override\n    public Class<?>[] getContextActions() {\n        return new Class[]{PM_DeviceFormula.class};\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "PKG-026", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建WM模块的库存调整服务，要求：\n1. 包路径com.company.erp.wm.service\n2. 使用@Service注解\n3. 包含batchAdjust方法", "output": "package com.company.erp.wm.service;\n\n@Service\npublic class WM_InventoryService {\n    public void batchAdjust() {\n        // 库存批量调整逻辑\n    }\n}"}

{"id": "PKG-027", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下类定义的包结构问题：\npackage com.company.erp.service;\npublic class HCM_EmployeeService {}", "output": "包路径未体现模块标识，正确路径应为：com.company.erp.hcm.service"}

{"messages": [{"role": "user", "content": "创建SD模块的销售订单配置类"}, {"role": "assistant", "content": "需满足：\n1. 包路径com.company.erp.sd.config\n2. 使用@Configuration注解\n3. 包含初始化方法"}, {"role": "user", "content": "@Component\nclass OrderConfig {\n    void init() {}\n}"}, {"role": "assistant", "content": "需要修正：\n1. 改为@Configuration注解\n2. 包路径应为sd.config\n3. 方法添加@Bean\n正确代码：\npackage com.company.erp.sd.config;\n\n@Configuration\npublic class SD_OrderConfig {\n    @Bean\n    public void initializeOrderService() {\n        // 初始化逻辑\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "PKG-029", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建RE模块的不动产评估Formula类，要求：\n1. 包路径com.company.erp.re.formula\n2. 继承EntityContextAction\n3. 包含calculateValue方法", "output": "package com.company.erp.re.formula;\n\npublic class RE_ValuationFormula extends EntityContextAction {\n    public BigDecimal calculateValue() throws Throwable {\n        // 不动产价值计算逻辑\n        return BigDecimal.ZERO;\n    }\n}"}

{"id": "PKG-030", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建跨模块使用的工具类，要求：\n1. 包路径com.company.erp.basis.common\n2. 类名CommonValidator\n3. 包含静态校验方法", "output": "package com.company.erp.basis.common;\n\npublic final class CommonValidator {\n    public static boolean isValidString(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n}"}

{"id": "CLS-031", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建SD模块的销售订单审核服务类，要求：\n1. 类名符合大驼峰\n2. 包含模块标识前缀\n3. 包路径正确", "output": "package com.company.erp.sd.service;\n\npublic class SD_OrderApprovalService {\n    // 审核逻辑实现\n}"}

{"messages": [{"role": "user", "content": "如何命名FI模块的银行交易实体类？"}, {"role": "assistant", "content": "需满足：\n1. 类名大驼峰\n2. 包含FI模块标识\n3. 继承AbstractBillEntity"}, {"role": "user", "content": "public class BankTransaction {"}, {"role": "assistant", "content": "需要修正：\n1. 添加模块前缀FI_\n2. 补充继承关系\n完整代码：\npackage com.company.erp.fi.entity;\n\npublic class FI_BankTransaction extends AbstractBillEntity {}"}], "type": "multi-turn", "case": "negative"}

{"id": "CLS-033", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下类名3处问题：\npublic class materialManager {}", "output": "1. 未使用大驼峰命名(MaterialManager)\n2. 缺少模块前缀(MM_)\n3. 未体现服务类后缀(Service)"}

{"id": "CLS-034", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建CO模块的成本异常类，要求：\n1. 类名后缀Exception\n2. 包含模块标识\n3. 继承CoreException", "output": "package com.company.erp.co.exception;\n\npublic class CO_CostException extends CoreException {\n    public CO_CostException(String message) {\n        super(message);\n    }\n}"}

{"messages": [{"role": "user", "content": "命名一个处理物料分类的Formula类"}, {"role": "assistant", "content": "应满足：\n1. 类名包含MaterialCategory\n2. 使用Formula后缀\n3. 带MM模块前缀"}, {"role": "user", "content": "class CatFormula extends EntityContextAction {}"}, {"role": "assistant", "content": "需要修正：\n1. 类名改为MM_MaterialCategoryFormula\n2. 包路径com.company.erp.mm.formula\n完整代码：\npackage com.company.erp.mm.formula;\n\npublic class MM_MaterialCategoryFormula extends EntityContextAction {}"}], "type": "multi-turn", "case": "negative"}

{"id": "CLS-036", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建AM模块的资产折旧计算器，要求：\n1. 类名体现计算功能\n2. 使用模块前缀\n3. 实现Calculator接口", "output": "package com.company.erp.am.service;\n\npublic class AM_DepreciationCalculator implements Calculator {\n    // 折旧计算实现\n}"}

{"id": "CLS-037", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下类定义的2处命名错误：\npublic class HcmEmployeeData {}", "output": "1. 模块标识应全大写前缀(HCM_)\n2. 类名应避免Data泛用后缀(改为HCM_EmployeeInfo)"}

{"messages": [{"role": "user", "content": "创建WM模块的库存校验工具类"}, {"role": "assistant", "content": "需满足：\n1. 类名带Validator后缀\n2. 使用WM_前缀\n3. 包含静态方法"}, {"role": "user", "content": "class StockCheck {"}, {"role": "assistant", "content": "需要修正：\n1. 类名改为WM_InventoryValidator\n2. 添加final修饰符\n正确代码：\npackage com.company.erp.wm.utils;\n\npublic final class WM_InventoryValidator {\n    public static boolean validateStock() {}\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "CLS-039", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建RE模块的不动产评估报告生成器，要求：\n1. 类名包含Generator后缀\n2. 使用模块前缀\n3. 实现Reportable接口", "output": "package com.company.erp.re.service;\n\npublic class RE_ValuationReportGenerator implements Reportable {\n    // 报告生成逻辑\n}"}

{"id": "CLS-040", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建跨模块使用的基础配置类，要求：\n1. 类名带Base前缀\n2. 放在basis模块\n3. 使用抽象类", "output": "package com.company.erp.basis.config;\n\npublic abstract class BaseConfiguration {\n    // 基础配置逻辑\n}"}

{"id": "DB-041", "type": "single-turn", "case": "positive", "language": "sql", "instruction": "创建物料管理模块的采购订单头表，要求：\n1. 使用模块表前缀\n2. 包含OID、DocumentNumber字段\n3. 主键使用OID", "output": "CREATE TABLE EMM_PurchaseOrderHead (\n    OID BIGINT PRIMARY KEY,\n    DocumentNumber VARCHAR(50),\n    VendorID BIGINT\n)"}

{"messages": [{"role": "user", "content": "需要创建销售模块的订单明细表"}, {"role": "assistant", "content": "请确认：\n1. 表名前缀ESD_\n2. 包含SOID关联字段\n3. 使用PascalCase字段命名"}, {"role": "user", "content": "CREATE TABLE OrderDtl (\n    oid bigint,\n    so_id bigint\n)"}, {"role": "assistant", "content": "需要修正：\n1. 表名应为ESD_SalesOrderDtl\n2. 字段名使用PascalCase\n3. 添加主键约束\n正确DDL：\nCREATE TABLE ESD_SalesOrderDtl (\n    OID BIGINT PRIMARY KEY,\n    SOID BIGINT,\n    MaterialID BIGINT\n)"}], "type": "multi-turn", "case": "negative"}

{"id": "DB-043", "type": "single-turn", "case": "negative", "language": "sql", "instruction": "指出以下建表语句的3处规范问题：\nCREATE TABLE material_cache (\n    mat_code varchar,\n    qty numeric\n)", "output": "1. 表名未使用模块前缀(EGMM_)\n2. 未使用大驼峰命名(MaterialCache)\n3. 字段名应使用PascalCase(MaterialCode, Quantity)"}

{"id": "DB-044", "type": "single-turn", "case": "positive", "language": "sql", "instruction": "创建全局字典表存储货币信息，要求：\n1. 使用D1_前缀\n2. 包含CurrencyCode和CurrencyName字段\n3. CurrencyCode为主键", "output": "CREATE TABLE D1_Currency (\n    CurrencyCode VARCHAR(3) PRIMARY KEY,\n    CurrencyName NVARCHAR(50)\n)"}

{"messages": [{"role": "user", "content": "如何设计PM模块的设备缓存表？"}, {"role": "assistant", "content": "需满足：\n1. 使用EGPM_前缀\n2. 包含LastMaintenanceDate\n3. 使用DATETIME类型"}, {"role": "user", "content": "CREATE TABLE PM_Cache (\n    device_id bigint,\n    last_date date\n)"}, {"role": "assistant", "content": "需要修正：\n1. 表名应为EGPM_DeviceCache\n2. 字段名使用PascalCase\n3. 日期类型用DATETIME\n正确DDL：\nCREATE TABLE EGPM_DeviceCache (\n    DeviceID BIGINT PRIMARY KEY,\n    LastMaintenanceDate DATETIME\n)"}], "type": "multi-turn", "case": "negative"}

{"id": "DB-046", "type": "single-turn", "case": "positive", "language": "sql", "instruction": "创建FI模块的银行交易流水表，要求：\n1. 表名前缀EFI_\n2. 包含交易金额和币种字段\n3. 金额使用NUMERIC(16,2)", "output": "CREATE TABLE EFI_BankTransaction (\n    OID BIGINT PRIMARY KEY,\n    Amount NUMERIC(16,2),\n    CurrencyCode VARCHAR(3)\n)"}

{"id": "DB-047", "type": "single-turn", "case": "negative", "language": "sql", "instruction": "指出以下全局系统表的问题：\nCREATE TABLE Global_Config (\n    config_key varchar,\n    config_value varchar\n)", "output": "1. 表名前缀应为EGS_\n2. 表名应使用大驼峰(EGS_GlobalConfig)\n3. 字段名应使用PascalCase(ConfigKey, ConfigValue)"}

{"messages": [{"role": "user", "content": "创建CO模块的成本分析临时表"}, {"role": "assistant", "content": "需注意：\n1. 表名前缀ECO_\n2. 添加TMP后缀\n3. 包含Period字段"}, {"role": "user", "content": "CREATE TABLE CostAnalysisTemp (\n    period date\n)"}, {"role": "assistant", "content": "需要修正：\n1. 表名应为ECO_CostAnalysisTMP\n2. 字段名使用PascalCase\n3. 添加主键\n正确DDL：\nCREATE TABLE ECO_CostAnalysisTMP (\n    AnalysisID BIGINT PRIMARY KEY,\n    Period DATETIME\n)"}], "type": "multi-turn", "case": "negative"}

{"id": "DB-049", "type": "single-turn", "case": "positive", "language": "sql", "instruction": "创建WM模块的库存移动历史表，要求：\n1. 表名前缀EWM_\n2. 包含FromLocation和ToLocation\n3. 使用DATETIME记录移动时间", "output": "CREATE TABLE EWM_InventoryMovement (\n    MovementID BIGINT PRIMARY KEY,\n    FromLocation NVARCHAR(50),\n    ToLocation NVARCHAR(50),\n    MovementTime DATETIME\n)"}

{"id": "DB-050", "type": "single-turn", "case": "positive", "language": "sql", "instruction": "创建HCM模块的员工技能矩阵表，要求：\n1. 表名前缀EHCM_\n2. 包含EmployeeID和SkillLevel\n3. 建立复合主键", "output": "CREATE TABLE EHCM_EmployeeSkill (\n    EmployeeID BIGINT,\n    SkillCode VARCHAR(10),\n    SkillLevel INT,\n    PRIMARY KEY (EmployeeID, SkillCode)\n)"}

{"id": "COD-051", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现财务模块的金额计算，要求：\n1. 使用BigDecimal进行精确计算\n2. 处理除零异常\n3. 返回保留两位小数的结果", "output": "public BigDecimal calculateAmount(BigDecimal amount, BigDecimal rate) throws Throwable {\n    if (rate.compareTo(BigDecimal.ZERO) == 0) {\n        throw new Throwable(\"汇率不能为零\");\n    }\n    return amount.divide(rate, 2, RoundingMode.HALF_UP);\n}"}

{"id": "COD-052", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下代码的3处规范问题：\npublic class OrderService {\n    void process() {\n        int total = price * qty;\n        save(total);\n    }\n}", "output": "1. 未处理数值计算精度问题\n2. 未声明抛出异常\n3. 未使用链式调用"}

{"messages": [{"role": "user", "content": "需要实现销售订单的状态机"}, {"role": "assistant", "content": "请遵循：\n1. 使用枚举定义状态\n2. 实现状态转换方法\n3. 包含状态校验逻辑"}, {"role": "user", "content": "enum Status { NEW, PAID }\nclass Order {\n    Status status;\n    void pay() { status = PAID; }\n}"}, {"role": "assistant", "content": "需修正：\n1. 添加状态转换校验\n2. 使用大写枚举值\n3. 添加日志记录\n完整代码：\npublic enum OrderStatus {\n    NEW, PAID;\n    \n    public void validateTransition(OrderStatus newStatus) {\n        // 状态校验逻辑\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "TEC-054", "type": "single-turn", "case": "positive", "language": "java", "instruction": "配置Spring Boot数据源，要求：\n1. 使用Druid连接池\n2. 配置连接池参数\n3. 启用监控统计", "output": "@Configuration\npublic class DataSourceConfig {\n    @Bean\n    @ConfigurationProperties(\"spring.datasource\")\n    public DataSource druidDataSource() {\n        DruidDataSource ds = new DruidDataSource();\n        ds.setStatViewServletEnabled(true);\n        return ds;\n    }\n}"}

{"id": "TEC-055", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下依赖配置的2处问题：\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-core</artifactId>\n    <version>5.2.9.RELEASE</version>\n</dependency>", "output": "1. 未使用Spring Boot BOM管理版本\n2. Spring版本与Boot 3不兼容"}

{"messages": [{"role": "user", "content": "如何集成MyBatis Plus？"}, {"role": "assistant", "content": "需配置：\n1. 添加mybatis-plus-boot-starter依赖\n2. 启用@MapperScan\n3. 配置分页插件"}, {"role": "user", "content": "@Mapper\ninterface UserMapper {}"}, {"role": "assistant", "content": "需修正：\n1. 使用@MapperScan批量扫描\n2. 添加分页配置类\n完整配置：\n@SpringBootApplication\n@MapperScan(\"com.company.erp.**.mapper\")\npublic class Application {\n    @Bean\n    public MybatisPlusInterceptor paginationInterceptor() {\n        return new MybatisPlusInterceptor();\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "QAC-057", "type": "single-turn", "case": "positive", "language": "java", "instruction": "编写采购订单保存方法的单元测试，要求：\n1. 使用JUnit 5\n2. 模拟上下文\n3. 验证异常场景", "output": "@ExtendWith(MockitoExtension.class)\nclass PurchaseOrderServiceTest {\n    @Mock\n    private MidContext context;\n    \n    @Test\n    void save_InvalidOrder_ThrowsException() {\n        PurchaseOrder invalidOrder = new PurchaseOrder();\n        assertThrows(Throwable.class, () -> service.save(invalidOrder));\n    }\n}"}

{"id": "QAC-058", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下测试类的2处问题：\npublic class OrderTest {\n    @Test\n    public void testSave() {\n        new OrderService().save(null);\n    }\n}", "output": "1. 未使用断言验证结果\n2. 未处理空指针异常"}

{"messages": [{"role": "user", "content": "如何进行代码审查？"}, {"role": "assistant", "content": "重点检查：\n1. 命名规范符合性\n2. 异常处理完整性\n3. 业务逻辑合理性"}, {"role": "user", "content": "发现方法超过100行代码"}, {"role": "assistant", "content": "应进行重构：\n1. 拆分为多个单一职责方法\n2. 提取工具类\n3. 添加方法级注释说明"}]}

{"id": "COD-060", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现链式Setter方法", "output": "public class Order {\n    public Order setAmount(BigDecimal amt) {\n        this.amount = amt;\n        return this;\n    }\n}"}
{"id": "COD-0600", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下代码的2处问题：\npublic void save() throws Exception {}", "output": "1. 异常声明过于宽泛\n2. 未记录异常日志"}
{"id": "COD-0601", "type": "single-turn", "case": "positive", "language": "java", "instruction": "编写符合SOLID原则的支付接口", "output": "public interface PaymentGateway {\n    void processPayment();\n    boolean validate();\n}"}
{"id": "COD-0602", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下代码的DRY原则违反：\nclass A { void calc() {...} }\nclass B { void calc() {...} }", "output": "重复计算逻辑应提取到工具类"}
{"id": "COD-0603", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现线程安全的缓存类", "output": "public class CacheManager {\n    private static final ConcurrentHashMap<String, Object> cache = new ConcurrentHashMap<>();\n}"}
{"id": "COD-0604", "type": "single-turn", "case": "positive", "language": "java", "instruction": "编写符合KISS原则的字符串处理", "output": "public static boolean isEmpty(String s) {\n    return s == null || s.trim().isEmpty();\n}"}

{"id": "TEC-061", "type": "single-turn", "case": "positive", "language": "java", "instruction": "配置Spring Boot Actuator端点", "output": "management.endpoints.web.exposure.include=health,info"}
{"id": "TEC-062", "type": "single-turn", "case": "negative", "language": "xml", "instruction": "指出依赖配置错误：\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <scope>compile</scope>\n</dependency>", "output": "Lombok应使用provided作用域"}
{"id": "TEC-063", "type": "single-turn", "case": "positive", "language": "java", "instruction": "集成Swagger文档", "output": "@Bean\npublic OpenAPI springShopOpenAPI() {\n    return new OpenAPI().info(new Info().title(\"ERP API\"));\n}"}
{"id": "TEC-065", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出MyBatis使用问题：\n@Select(\"SELECT * FROM order\")", "output": "1. 未使用#{param}语法\n2. 表名未加前缀"}
{"id": "TEC-066", "type": "single-turn", "case": "positive", "language": "java", "instruction": "配置多数据源", "output": "@Configuration\n@MapperScan(basePackages = \"com.company.erp.fi.mapper\", sqlSessionFactoryRef = \"fiSqlSessionFactory\")"}
{"id": "TEC-067", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现FeignClient调用", "output": "@FeignClient(name = \"payment-service\", url = \"${feign.payment.url}\")"}
{"id": "TEC-068", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出缓存使用问题：\n@Cacheable(\"orders\")", "output": "未配置缓存管理器"}
{"id": "TEC-069", "type": "single-turn", "case": "positive", "language": "java", "instruction": "配置JWT安全框架", "output": "@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    http.csrf().disable().authorizeRequests().anyRequest().authenticated();\n}"}
{"id": "TEC-070", "type": "single-turn", "case": "positive", "language": "java", "instruction": "集成消息队列", "output": "@RabbitListener(queues = \"erp.order.queue\")\npublic void handleMessage(OrderMessage message) {}"}

{"id": "QAC-071", "type": "single-turn", "case": "positive", "language": "java", "instruction": "编写Jacoco覆盖率配置", "output": "<plugin>\n    <groupId>org.jacoco</groupId>\n    <artifactId>jacoco-maven-plugin</artifactId>\n    <version>0.8.7</version>\n</plugin>"}
{"id": "QAC-072", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出测试问题：\n@Test\nvoid test() {}", "output": "1. 测试方法无断言\n2. 未使用描述性方法名"}
{"id": "QAC-073", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实施SonarQube检查规则", "output": "sonar.issue.ignore.multicriteria=e1\ne1.ruleKey=java:S106\ne1.resourceKey=**/*.java"}
{"id": "QAC-075", "type": "single-turn", "case": "positive", "language": "java", "instruction": "编写集成测试模板", "output": "@SpringBootTest\n@AutoConfigureMockMvc\npublic class IntegrationTest {\n    @Autowired\n    private MockMvc mockMvc;\n}"}
{"id": "QAC-076", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出日志记录问题：\nlogger.info(\"Error occurred\");", "output": "错误级别使用不当，应使用error级别"}
{"id": "QAC-077", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实施PMD代码检查规则", "output": "<rule ref=\"category/java/errorprone.xml\">\n    <exclude name=\"AvoidDuplicateLiterals\"/>\n</rule>"}
{"id": "QAC-078", "type": "single-turn", "case": "positive", "language": "java", "instruction": "编写性能测试用例", "output": "@Test\n@Timeout(value = 1000, unit = TimeUnit.MILLISECONDS)\nvoid processOrder_PerformanceTest() {}"}
{"id": "QAC-079", "type": "single-turn", "case": "positive", "language": "java", "instruction": "配置Checkstyle规则", "output": "<module name=\"Checker\">\n    <module name=\"TreeWalker\">\n        <module name=\"MethodName\"/>\n    </module>\n</module>"}
{"id": "QAC-080", "type": "single-turn", "case": "positive", "language": "java", "instruction": "生成架构文档", "output": "/**\n * @arch 采用分层架构设计\n * @layer 基础层-业务层-配置层\n */"}

{"id": "LAYER-001", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在基础层创建ID生成工具类，要求：\n1. 包路径com.company.erp.basis.utils\n2. 使用Snowflake算法\n3. 线程安全", "output": "package com.company.erp.basis.utils;\n\npublic final class IdGenerator {\n    private static final Snowflake snowflake = new Snowflake();\n    \n    public static long nextId() {\n        return snowflake.nextId();\n    }\n}"}

{"messages": [{"role": "user", "content": "业务层需要调用基础层的ID生成器"}, {"role": "assistant", "content": "正确方式：\n1. 直接静态调用\n2. 不得修改基础层代码\n3. 处理异常值"}, {"role": "user", "content": "long id = new IdGenerator().generate();"}, {"role": "assistant", "content": "需要修正：\n1. 使用静态方法调用\n2. 移除实例化\n正确代码：long orderId = IdGenerator.nextId();"}], "type": "multi-turn", "case": "negative"}

{"id": "LAYER-003", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下代码的分层问题：\npackage com.company.erp.sd.service;\npublic class BasisUtil {}", "output": "1. 基础层工具类误放在业务层包\n2. 类名缺少SD模块标识\n3. 违反分层职责边界"}

{"id": "LAYER-004", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在业务层实现订单状态机，要求：\n1. 包路径com.company.erp.sd.service\n2. 使用枚举定义状态\n3. 实现状态校验", "output": "package com.company.erp.sd.service;\n\npublic enum OrderStatus {\n    NEW {\n        @Override\n        void validateTransition(OrderStatus newStatus) {\n            if (!PAID.equals(newStatus)) throw new IllegalStateException();\n        }\n    },\n    PAID;\n    \n    abstract void validateTransition(OrderStatus newStatus);\n}"}

{"id": "LAYER-005", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在配置层创建YAML解析器，要求：\n1. 包路径com.company.erp.solution.yaml\n2. 实现SolutionParser接口\n3. 支持多环境配置", "output": "package com.company.erp.solution.yaml;\n\npublic class YamlConfigParser implements SolutionParser {\n    public void parse(String yamlPath) {\n        // 多环境配置解析实现\n    }\n}"}

{"messages": [{"role": "user", "content": "如何在基础层实现通用异常"}, {"role": "assistant", "content": "需满足：\n1. 包路径com.company.erp.basis.exception\n2. 继承RuntimeException\n3. 包含错误码字段"}, {"role": "user", "content": "class AppError extends Exception {}"}, {"role": "assistant", "content": "需修正：\n1. 包路径错误\n2. 改为继承CoreException\n3. 添加错误码\n完整代码：\npackage com.company.erp.basis.exception;\n\npublic class CoreException extends RuntimeException {\n    private final String errorCode;\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "LAYER-007", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建业务层物料服务接口，要求：\n1. 包路径com.company.erp.mm.service\n2. 定义getMaterial方法\n3. 使用@Repository注解", "output": "package com.company.erp.mm.service;\n\n@Repository\npublic interface MaterialService {\n    Material getMaterial(String code);\n}"}

{"id": "LAYER-008", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出分层问题：\npackage com.company.erp.basis.service;\npublic class OrderService {}", "output": "1. 服务类不应放在基础层\n2. 违反分层架构职责\n3. 正确路径应为com.company.erp.sd.service"}

{"id": "LAYER-009", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在配置层实现多数据源配置，要求：\n1. 包路径com.company.erp.solution.database\n2. 使用@Configuration\n3. 配置主从数据源", "output": "package com.company.erp.solution.database;\n\n@Configuration\npublic class DataSourceConfig {\n    @Bean\n    @Primary\n    public DataSource masterDataSource() {\n        // 主数据源配置\n    }\n}"}

{"messages": [{"role": "user", "content": "基础层工具类需要记录日志"}, {"role": "assistant", "content": "应：\n1. 使用SLF4J接口\n2. 静态Logger实例\n3. 避免业务层依赖"}, {"role": "user", "content": "public class DateUtil {\n    Logger log = LoggerFactory.getLogger(DateUtil.class);\n}"}, {"role": "assistant", "content": "需要修正：\n1. Logger应为static final\n正确代码：\nprivate static final Logger LOGGER = LoggerFactory.getLogger(DateUtil.class);"}], "type": "multi-turn", "case": "negative"}

{"id": "LAYER-011", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在业务层创建工厂类，要求：\n1. 包路径com.company.erp.sd.factory\n2. 实现OrderFactory接口\n3. 使用枚举类型", "output": "package com.company.erp.sd.factory;\n\npublic enum OrderFactoryImpl implements OrderFactory {\n    INSTANCE;\n    \n    public Order create() {\n        return new SalesOrder();\n    }\n}"}

{"id": "LAYER-012", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出问题：\npackage com.company.erp.solution.xml;\npublic class BasisXmlParser {}", "output": "1. 类名缺少解决方案标识\n2. 基础层命名污染配置层\n3. 应命名为SolutionXmlParser"}

{"id": "LAYER-013", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在基础层创建缓存抽象类，要求：\n1. 包路径com.company.erp.basis.cache\n2. 定义泛型接口\n3. 支持TTL配置", "output": "package com.company.erp.basis.cache;\n\npublic abstract class AbstractCache<T> {\n    public abstract void put(String key, T value, Duration ttl);\n    public abstract T get(String key);\n}"}

{"messages": [{"role": "user", "content": "在业务层调用配置层参数"}, {"role": "assistant", "content": "应通过：\n1. 配置层定义@Bean\n2. 业务层@Autowired注入\n3. 禁止直接访问配置类"}, {"role": "user", "content": "String config = SolutionConfig.getParam();"}, {"role": "assistant", "content": "违反分层依赖！正确方式：\n@Autowired\nprivate AppConfig appConfig;"}], "type": "multi-turn", "case": "negative"}

{"id": "LAYER-015", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在配置层实现特性开关，要求：\n1. 包路径com.company.erp.solution.feature\n2. 使用@Conditional注解\n3. 支持环境配置", "output": "package com.company.erp.solution.feature;\n\n@ConditionalOnProperty(name=\"feature.new_payment\")\npublic class PaymentFeatureToggle {\n    // 特性开关实现\n}"}

{"id": "LAYER-016", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出问题：\npackage com.company.erp.sd.formula;\npublic abstract class BaseService {}", "output": "1. 基础层抽象类误放在业务层\n2. 类名不符合公式类规范\n3. 应放在basis.service包"}

{"id": "LAYER-017", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在基础层实现加密工具，要求：\n1. 包路径com.company.erp.basis.security\n2. 使用AES算法\n3. 线程安全", "output": "package com.company.erp.basis.security;\n\npublic final class AESUtils {\n    private static final SecureRandom secureRandom = new SecureRandom();\n    \n    public static String encrypt(String plainText) {\n        // AES加密实现\n    }\n}"}

{"messages": [{"role": "user", "content": "业务层需要扩展基础层功能"}, {"role": "assistant", "content": "正确方式：\n1. 在basis模块创建扩展类\n2. 保持向后兼容\n3. 通过接口暴露功能"}, {"role": "user", "content": "public class OrderUtil extends BasisUtil {}"}, {"role": "assistant", "content": "需要修正：\n1. 改为组合模式\n2. 定义扩展接口\n3. 保持基础层稳定"}], "type": "multi-turn", "case": "negative"}

{"id": "LAYER-019", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在业务层实现审计切面，要求：\n1. 包路径com.company.erp.sd.aspect\n2. 使用@Aspect注解\n3. 记录操作日志", "output": "package com.company.erp.sd.aspect;\n\n@Aspect\n@Component\npublic class AuditAspect {\n    @AfterReturning(\"execution(* com.company.erp.sd.service.*.*(..))\")\n    public void log() {\n        // 审计日志记录\n    }\n}"}

{"id": "LAYER-020", "type": "single-turn", "case": "positive", "language": "java", "instruction": "在配置层实现多语言支持，要求：\n1. 包路径com.company.erp.solution.i18n\n2. 使用MessageSource\n3. 支持资源热加载", "output": "package com.company.erp.solution.i18n;\n\npublic class I18nManager implements MessageSource {\n    // 多语言资源热加载实现\n}"}

{"id": "COMM-001", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现SD模块调用FI支付接口，要求：\n1. 使用FeignClient声明式调用\n2. 定义降级回退类\n3. 使用DTO传输数据", "output": "@FeignClient(name = \"fi-payment\", fallback = PaymentFallback.class)\npublic interface PaymentClient {\n    @PostMapping(\"/payments\")\n    PaymentResult process(@RequestBody PaymentRequestDTO dto);\n}\n\npublic class PaymentFallback implements PaymentClient {\n    public PaymentResult process(PaymentRequestDTO dto) {\n        return new PaymentResult(\"FALLBACK\");\n    }}\n"}

{"messages": [{"role": "user", "content": "MM模块如何获取WM库存数据"}, {"role": "assistant", "content": "应通过：\n1. 定义库存查询事件\n2. 实现事件处理器\n3. 使用异步通信"}, {"role": "user", "content": "Inventory inventory = wmDao.queryStock(materialId);"}, {"role": "assistant", "content": "违反规范！正确方式：\n1. 发布InventoryQueryEvent事件\n2. 实现@EventListener处理方法\n完整代码：\n@EventListener\npublic Inventory handleQuery(InventoryQueryEvent event) {\n    return wmService.getStock(event.getMaterialId());\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "COMM-003", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建跨模块消息协议，要求：\n1. 使用Protobuf格式\n2. 定义OrderCreated消息\n3. 包含必要字段", "output": "syntax = \"proto3\";\nmessage OrderCreated {\n    string order_id = 1;\n    int64 create_time = 2;\n    repeated OrderItem items = 3;\n}\nmessage OrderItem {\n    string sku = 1;\n    int32 quantity = 2;\n}"}

{"id": "COMM-004", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出以下代码的问题：\npublic class OrderService {\n    @Autowired\n    private InventoryService inventoryService;\n}", "output": "1. 直接注入其他模块服务类\n2. 未通过接口抽象\n3. 违反模块边界"}

{"messages": [{"role": "user", "content": "如何实现模块间配置同步"}, {"role": "assistant", "content": "应使用：\n1. Spring Cloud Config\n2. 配置中心模式\n3. @RefreshScope注解"}, {"role": "user", "content": "String value = configFile.getProperty(\"key\");"}, {"role": "assistant", "content": "需要修正：\n1. 使用@Value注入配置\n2. 通过配置中心获取\n正确代码：\n@Value(\"${config.key}\")\nprivate String configValue;"}], "type": "multi-turn", "case": "negative"}

{"id": "COMM-006", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现分布式事务，要求：\n1. 使用Seata框架\n2. 标注@GlobalTransactional\n3. 处理回滚逻辑", "output": "@GlobalTransactional(timeoutMills = 300000, name = \"order-pay-tx\")\npublic void processOrder() {\n    orderService.create();\n    paymentService.pay();\n    // 异常时自动回滚\n}"}

{"id": "COMM-007", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建审计日志事件，要求：\n1. 实现ApplicationEvent\n2. 包含操作类型字段\n3. 跨模块监听", "output": "public class AuditEvent extends ApplicationEvent {\n    private final AuditType type;\n    public AuditEvent(Object source, AuditType type) {\n        super(source);\n        this.type = type;\n    }\n}\n\n@Component\npublic class AuditListener {\n    @EventListener\n    public void handleAudit(AuditEvent event) {\n        // 处理审计日志\n    }\n}"}

{"messages": [{"role": "user", "content": "FI模块需要通知SD模块付款状态"}, {"role": "assistant", "content": "应通过：\n1. 发布PaymentStatusEvent事件\n2. 使用@Async异步处理\n3. 保证最终一致性"}, {"role": "user", "content": "sdService.updatePaymentStatus(orderId, status);"}, {"role": "assistant", "content": "违反规范！正确方式：\napplicationContext.publishEvent(new PaymentStatusEvent(orderId, status));"}], "type": "multi-turn", "case": "negative"}

{"id": "COMM-009", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现服务熔断，要求：\n1. 使用Resilience4j\n2. 配置超时时间\n3. 定义fallback方法", "output": "@CircuitBreaker(name = \"paymentService\", fallbackMethod = \"fallback\")\npublic PaymentResult processPayment() {\n    return paymentClient.process(request);\n}\n\nprivate PaymentResult fallback(Exception e) {\n    return new PaymentResult(\"FALLBACK\");\n}"}

{"id": "COMM-010", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出问题：\npublic class Order {\n    @Column(name = \"FI_AccountID\")\n    private String accountId;\n}", "output": "1. 直接依赖FI模块数据库字段\n2. 应通过服务获取账户信息\n3. 违反模块数据库隔离原则"}

{"messages": [{"role": "user", "content": "如何设计跨模块缓存"}, {"role": "assistant", "content": "需满足：\n1. 使用Redis分布式缓存\n2. 定义统一缓存前缀\n3. 处理缓存穿透"}, {"role": "user", "content": "Object value = localCache.get(key);"}, {"role": "assistant", "content": "需要修正：\n1. 改用RedisTemplate\n2. 添加模块前缀\n正确代码：\nredisTemplate.opsForValue().get(\"SD:ORDER:\" + key);"}], "type": "multi-turn", "case": "negative"}

{"id": "COMM-012", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建REST API版本控制，要求：\n1. URL路径版本控制\n2. 支持v1/v2版本\n3. 使用@Deprecated标注旧版", "output": "@RestController\n@RequestMapping(\"/api/v1/orders\")\n@Deprecated\npublic class OrderControllerV1 {\n    // 旧版实现\n}\n\n@RestController\n@RequestMapping(\"/api/v2/orders\")\npublic class OrderControllerV2 {\n    // 新版实现\n}"}

{"id": "COMM-013", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现消息队列通信，要求：\n1. 使用RabbitMQ\n2. 定义死信队列\n3. 手动确认机制", "output": "@Bean\npublic Queue orderQueue() {\n    return QueueBuilder.durable(\"ORDER_QUEUE\")\n        .withArgument(\"x-dead-letter-exchange\", \"DLX\")\n        .build();\n}\n\n@RabbitListener(queues = \"ORDER_QUEUE\")\npublic void handle(OrderMessage message, Channel channel) {\n    try {\n        // 业务处理\n        channel.basicAck(deliveryTag, false);\n    } catch (Exception e) {\n        channel.basicNack(deliveryTag, false, true);\n    }\n}"}

{"messages": [{"role": "user", "content": "模块间如何传递用户上下文"}, {"role": "assistant", "content": "应通过：\n1. RequestHeader传递\n2. 使用Feign拦截器\n3. 线程上下文管理"}, {"role": "user", "content": "String userId = SessionUtils.getUserId();"}, {"role": "assistant", "content": "需要修正：\n@RequestHeader(\"X-User-Id\") String userId\n并实现拦截器：\npublic class UserContextInterceptor implements RequestInterceptor {\n    public void apply(RequestTemplate template) {\n        template.header(\"X-User-Id\", UserHolder.get());\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "COMM-015", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建gRPC服务定义，要求：\n1. 使用proto3语法\n2. 定义GetMaterial方法\n3. 支持流式响应", "output": "syntax = \"proto3\";\nservice MaterialService {\n    rpc GetMaterial(MaterialRequest) returns (stream MaterialResponse);\n}\nmessage MaterialRequest {\n    string code = 1;\n}\nmessage MaterialResponse {\n    string name = 1;\n    int32 stock = 2;\n}"}

{"id": "COMM-016", "type": "single-turn", "case": "negative", "language": "java", "instruction": "指出问题：\npublic class OrderService {\n    private final RestTemplate rest = new RestTemplate();\n    public PaymentResult pay() {\n        return rest.postForObject(\"http://fi/pay\", null, PaymentResult.class);\n    }\n}", "output": "1. 硬编码服务地址\n2. 未使用服务发现\n3. 缺少熔断机制"}

{"messages": [{"role": "user", "content": "如何保证消息顺序性"}, {"role": "assistant", "content": "应配置：\n1. RabbitMQ单队列单消费者\n2. Kafka分区键\n3. 数据库版本号"}, {"role": "user", "content": "mq.send(\"order_queue\", message);"}, {"role": "assistant", "content": "需要修正：\n1. 指定消息路由键\n2. 使用顺序消息队列\n正确代码：\ntemplate.convertAndSend(\"order_queue\", routingKey, message);"}], "type": "multi-turn", "case": "negative"}

{"id": "COMM-018", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现API网关路由，要求：\n1. 使用Spring Cloud Gateway\n2. 配置SD模块路由\n3. 添加鉴权过滤器", "output": "@Bean\npublic RouteLocator routes(RouteLocatorBuilder builder) {\n    return builder.routes()\n        .route(\"sd-service\", r -> r.path(\"/api/sd/**\")\n            .filters(f -> f.filter(authFilter))\n            .uri(\"lb://sd-service\"))\n        .build();\n}\n\n@Component\npublic class AuthFilter implements GatewayFilter {\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n        // 鉴权逻辑\n    }\n}"}

{"id": "COMM-019", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建分布式跟踪，要求：\n1. 集成Sleuth+Zipkin\n2. 添加跟踪ID\n3. 记录跨模块调用", "output": "spring.zipkin.base-url=http://zipkin:9411\nspring.sleuth.sampler.probability=1.0\n\n@Autowired\nprivate Tracer tracer;\n\ntracer.currentSpan().tag(\"module\", \"SD\");"}

{"id": "COMM-020", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现服务版本协商，要求：\n1. 使用Content Negotiation\n2. 支持vnd.company.v1+json\n3. 配置Produces注解", "output": "@GetMapping(produces = \"application/vnd.company.v1+json\")\npublic ResponseEntity<OrderV1> getOrderV1() {\n    // V1版本实现\n}\n\n@GetMapping(produces = \"application/vnd.company.v2+json\")\npublic ResponseEntity<OrderV2> getOrderV2() {\n    // V2版本实现\n}"}

{"id": "XML-001", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "创建物料管理模块的采购订单DataObject配置，要求：\n1. 表前缀EMM_\n2. 包含系统字段OID、Creator\n3. 定义DocumentNumber业务字段", "output": "<DataObject Key=\"MM_PurchaseOrder\" PrimaryTableKey=\"EMM_PurchaseOrderHead\">\n  <TableCollection>\n    <Table Key=\"EMM_PurchaseOrderHead\">\n      <Column Key=\"OID\" DataType=\"Long\" Caption=\"对象标识\"/>\n      <Column Key=\"Creator\" DataType=\"Long\" Caption=\"制单人\"/>\n      <Column Key=\"DocumentNumber\" DataType=\"Varchar\" Length=\"50\"/>\n    </Table>\n  </TableCollection>\n</DataObject>"}

{"messages": [{"role": "user", "content": "如何配置销售订单表单？"}, {"role": "assistant", "content": "需满足：\n1. Form的Key使用SD模块前缀\n2. 正确引用DataObject\n3. 包含保存操作绑定"}, {"role": "user", "content": "<Form Key=\"SalesOrder\">\n  <DataSource RefObjectKey=\"Order\"/>\n</Form>"}, {"role": "assistant", "content": "需要修正：\n1. Key应为SD_SalesOrder\n2. RefObjectKey需匹配DataObject\n3. 添加OperationCollection\n正确配置：\n<Form Key=\"SD_SalesOrder\" FormType=\"Entity\">\n  <DataSource RefObjectKey=\"SD_SalesOrder\"/>\n  <OperationCollection>\n    <Operation Key=\"BillSave\" Caption=\"保存\">\n      <Action><![CDATA[Macro_Save;]]></Action>\n    </Operation>\n  </OperationCollection>\n</Form>"}], "type": "multi-turn", "case": "negative"}

{"id": "XML-003", "type": "single-turn", "case": "negative", "language": "xml", "instruction": "指出以下配置的3处错误：\n<DataObject Key=\"material\">\n  <Table Key=\"mat_head\">\n    <Column Key=\"id\" Type=\"number\"/>\n  </Table>\n</DataObject>", "output": "1. Key未使用模块前缀(MM_Material)\n2. 表名未遵循EMM_前缀\n3. 字段类型应使用DataType属性"}

{"id": "XML-004", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "创建全局字典表配置，要求：\n1. 使用D1_前缀\n2. 包含Status字段\n3. 定义枚举值", "output": "<DataObject Key=\"D1_Status\" PrimaryTableKey=\"D1_Status\">\n  <TableCollection>\n    <Table Key=\"D1_Status\">\n      <Column Key=\"StatusCode\" DataType=\"Varchar\" Length=\"10\" Caption=\"状态代码\"/>\n      <Column Key=\"StatusName\" DataType=\"NVarchar\" Length=\"50\" Caption=\"状态名称\"/>\n    </Table>\n  </TableCollection>\n</DataObject>"}

{"messages": [{"role": "user", "content": "如何给物料表添加索引？"}, {"role": "assistant", "content": "应满足：\n1. 索引前缀与表名一致\n2. 包含必要字段索引\n3. 在Table节点定义"}, {"role": "user", "content": "<Index name=\"idx_material_code\">\n  <Column>code</Column>\n</Index>"}, {"role": "assistant", "content": "需要修正：\n1. 索引名改为IDX_EMM_MaterialCode\n2. 字段名使用PascalCase\n正确配置：\n<Table Key=\"EMM_Material\">\n  <IndexCollection>\n    <Index Key=\"IDX_EMM_MaterialCode\">\n      <Column>MaterialCode</Column>\n    </Index>\n  </IndexCollection>\n</Table>"}], "type": "multi-turn", "case": "negative"}

{"id": "XML-006", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "配置销售订单明细表，要求：\n1. 表名前缀ESD_\n2. 包含Quantity和UnitPrice字段\n3. Quantity使用NUMERIC(16,3)", "output": "<Table Key=\"ESD_SalesOrderDtl\">\n  <Column Key=\"Quantity\" DataType=\"Numeric\" Precision=\"16\" Scale=\"3\"/>\n  <Column Key=\"UnitPrice\" DataType=\"Numeric\" Precision=\"16\" Scale=\"2\"/>\n</Table>"}

{"id": "XML-007", "type": "single-turn", "case": "negative", "language": "xml", "instruction": "指出表单配置问题：\n<Form Key=\"MM_Order\">\n  <DataSource RefObjectKey=\"SD_SalesOrder\"/>\n</Form>", "output": "1. RefObjectKey跨模块引用未配置关联\n2. MM模块表单不应引用SD模块DataObject\n3. 缺少必要的操作定义"}

{"messages": [{"role": "user", "content": "如何配置货币字段的字典？"}, {"role": "assistant", "content": "需满足：\n1. 使用Dict控件\n2. 绑定D1_Currency表\n3. 设置ItemKey属性"}, {"role": "user", "content": "<TextEditor Key=\"Currency\"/>"}, {"role": "assistant", "content": "需要修正：\n<Dict Key=\"CurrencyID\" ItemKey=\"Currency\">\n  <DataBinding TableKey=\"EMM_PurchaseOrderHead\" ColumnKey=\"CurrencyID\"/>\n</Dict>"}], "type": "multi-turn", "case": "negative"}

{"id": "XML-009", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "配置单据审批流程，要求：\n1. 使用Workflow节点\n2. 包含三级审批步骤\n3. 定义审批角色", "output": "<Workflow Key=\"APPROVAL_FLOW\">\n  <Step Seq=\"1\" Name=\"部门审批\" Role=\"DEPT_MANAGER\"/>\n  <Step Seq=\"2\" Name=\"财务审批\" Role=\"FINANCE\"/>\n  <Step Seq=\"3\" Name=\"最终批准\" Role=\"CEO\"/>\n</Workflow>"}

{"id": "XML-010", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "创建打印模板配置，要求：\n1. 使用PrintTemplate节点\n2. 包含页眉页脚定义\n3. 配置表格数据区", "output": "<PrintTemplate Key=\"SD_SO_Print\">\n  <Header>\n    <Text>公司名称：{{Company}}</Text>\n  </Header>\n  <Body>\n    <Table DataSource=\"ESD_SalesOrderDtl\"/>\n  </Body>\n  <Footer>\n    <Text>打印时间：{{PrintTime}}</Text>\n  </Footer>\n</PrintTemplate>"}

{"messages": [{"role": "user", "content": "如何配置物料分类的树形结构？"}, {"role": "assistant", "content": "应满足：\n1. 使用TreeTable模式\n2. 定义ParentID字段\n3. 设置层级索引"}, {"role": "user", "content": "<Table Key=\"MM_Category\">\n  <Column Key=\"Parent\"/>\n</Table>"}, {"role": "assistant", "content": "需要修正：\n1. 字段名应为ParentID\n2. 添加TableMode=\"Tree\"\n正确配置：\n<Table Key=\"EMM_MaterialCategory\" TableMode=\"Tree\">\n  <Column Key=\"ParentID\" DataType=\"Long\"/>\n  <IndexCollection>\n    <Index Key=\"IDX_EMM_CategoryParent\" Columns=\"ParentID\"/>\n  </IndexCollection>\n</Table>"}], "type": "multi-turn", "case": "negative"}

{"id": "XML-012", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "配置全局参数表，要求：\n1. 使用EGS_前缀\n2. 包含参数键值对\n3. 配置版本字段", "output": "<DataObject Key=\"EGS_GlobalParam\" Version=\"1\">\n  <TableCollection>\n    <Table Key=\"EGS_GlobalParam\">\n      <Column Key=\"ParamKey\" DataType=\"Varchar\" Length=\"50\"/>\n      <Column Key=\"ParamValue\" DataType=\"NVarchar\" Length=\"200\"/>\n      <Column Key=\"Version\" DataType=\"Integer\"/>\n    </Table>\n  </TableCollection>\n</DataObject>"}

{"id": "XML-013", "type": "single-turn", "case": "negative", "language": "xml", "instruction": "指出问题：\n<Column Key=\"price\" Type=\"decimal\" size=\"10\"/>", "output": "1. 属性命名错误(应为DataType=\"Numeric\")\n2. 未指定精度(Precision/Scale)\n3. 字段名未用PascalCase(Price)"}

{"messages": [{"role": "user", "content": "如何配置表单布局？"}, {"role": "assistant", "content": "应使用：\n1. GridLayoutPanel\n2. 定义行列坐标\n3. 添加BuddyKey关联标签"}, {"role": "user", "content": "<Form>\n  <Label Text=\"客户\"/>\n  <TextEditor/>\n</Form>"}, {"role": "assistant", "content": "需要修正：\n<GridLayoutPanel>\n  <Label Key=\"lblCustomer\" Caption=\"客户\" X=\"0\" Y=\"0\"/>\n  <Dict Key=\"CustomerID\" X=\"1\" Y=\"0\" BuddyKey=\"lblCustomer\"/>\n</GridLayoutPanel>"}], "type": "multi-turn", "case": "negative"}

{"id": "XML-015", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "配置物料图片存储，要求：\n1. 使用BLOB类型\n2. 单独存储表\n3. 关联主表OID", "output": "<Table Key=\"EMM_MaterialImage\">\n  <Column Key=\"MaterialOID\" DataType=\"Long\"/>\n  <Column Key=\"ImageData\" DataType=\"Blob\"/>\n  <ForeignKey>\n    <Reference TableKey=\"EMM_Material\" Column=\"OID\"/>\n  </ForeignKey>\n</Table>"}

{"id": "XML-016", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "创建多语言标签配置，要求：\n1. 使用Label节点\n2. 包含中英文版本\n3. 按模块分组", "output": "<Labels Module=\"MM\">\n  <Label Key=\"MATERIAL_CODE\" \n         ZH_CN=\"物料编码\" \n         EN_US=\"Material Code\"/>\n  <Label Key=\"MATERIAL_NAME\"\n         ZH_CN=\"物料名称\"\n         EN_US=\"Material Name\"/>\n</Labels>"}

{"messages": [{"role": "user", "content": "如何配置审批按钮权限？"}, {"role": "assistant", "content": "应满足：\n1. 使用Operation节点的VisibleWhen\n2. 绑定角色数据\n3. 配置权限表达式"}, {"role": "user", "content": "<Operation Key=\"Approve\" Caption=\"批准\"/>"}, {"role": "assistant", "content": "需要添加权限控制：\n<Operation Key=\"Approve\" Caption=\"批准\">\n  <VisibleWhen Expression=\"HasRole('APPROVER')\"/>\n</Operation>"}], "type": "multi-turn", "case": "negative"}

{"id": "XML-018", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "配置报表筛选条件，要求：\n1. 使用FilterPanel\n2. 包含日期范围选择\n3. 支持快速查询", "output": "<FilterPanel>\n  <DateRangePicker Key=\"DateRange\" \n                  Caption=\"日期范围\"\n                  StartDate=\"BeginDate\"\n                  EndDate=\"EndDate\"/>\n  <QuickSearch Key=\"Keyword\" Caption=\"关键字\"/>\n</FilterPanel>"}

{"id": "XML-019", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "创建移动端表单简化视图，要求：\n1. 使用MobileForm节点\n2. 仅保留核心字段\n3. 适配小屏布局", "output": "<MobileForm RefObjectKey=\"SD_SalesOrder\">\n  <FieldSet>\n    <Field Key=\"DocumentNumber\" Width=\"100%\"/>\n    <Field Key=\"CustomerID\" Width=\"100%\"/>\n  </FieldSet>\n</MobileForm>"}

{"id": "XML-020", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "配置审计日志规则，要求：\n1. 记录字段修改历史\n2. 包含修改前后值\n3. 存储到日志表", "output": "<AuditRule TableKey=\"EMM_Material\">\n  <TrackFields>\n    <Field Name=\"MaterialName\" LogFormat=\"{{OldValue}}→{{NewValue}}\"/>\n    <Field Name=\"Price\" LogFormat=\"价格变更：{{Delta}}\"/>\n  </TrackFields>\n  <LogTable Key=\"EGS_AuditLog\"/>\n</AuditRule>"}

{"id": "MOD-FI-001", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现FI模块的汇率转换服务，要求：\n1. 包路径com.company.erp.fi.service\n2. 使用BigDecimal精确计算\n3. 处理货币代码无效异常", "output": "package com.company.erp.fi.service;\n\npublic class FI_ExchangeService {\n    public BigDecimal convert(BigDecimal amount, String fromCurrency, String toCurrency) \n        throws InvalidCurrencyException {\n        if (!validCurrency(fromCurrency) || !validCurrency(toCurrency)) {\n            throw new InvalidCurrencyException(\"无效货币代码\");\n        }\n        return amount.multiply(getRate(fromCurrency, toCurrency));\n    }\n}"}

{"messages": [{"role": "user", "content": "如何在CO模块实现成本分摊？"}, {"role": "assistant", "content": "需满足：\n1. 包路径com.company.erp.co.formula\n2. 继承EntityContextAction\n3. 按部门分摊计算"}, {"role": "user", "content": "void allocateCost(Cost cost) {\n    // 简单平均分摊\n}"}, {"role": "assistant", "content": "需要修正：\n1. 添加throws Throwable\n2. 实现部门权重计算\n3. 注册到COContextActionRegistry\n完整代码：\npackage com.company.erp.co.formula;\n\npublic class CostAllocationFormula extends EntityContextAction {\n    public void allocate(Cost cost) throws Throwable {\n        validateDepartments();\n        calculateWeightedAllocation(cost);\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-MM-003", "type": "single-turn", "case": "positive", "language": "java", "instruction": "创建MM模块的物料批次实体，要求：\n1. 包路径com.company.erp.mm.entity\n2. 包含batchNo、expiryDate字段\n3. 实现效期校验方法", "output": "package com.company.erp.mm.entity;\n\npublic class MM_MaterialBatch extends AbstractBillEntity {\n    public static final String BatchNo = \"BatchNo\";\n    public static final String ExpiryDate = \"ExpiryDate\";\n    \n    public boolean isExpired() {\n        return LocalDate.now().isAfter(getExpiryDate());\n    }\n}"}

{"id": "MOD-SD-004", "type": "single-turn", "case": "negative", "language": "xml", "instruction": "指出SD模块表单配置错误：\n<Form Key=\"SalesOrder\">\n  <DataSource RefObjectKey=\"Order\"/>\n</Form>", "output": "1. 未使用SD_前缀(SD_SalesOrder)\n2. RefObjectKey未匹配DataObject\n3. 缺少OperationCollection定义"}

{"messages": [{"role": "user", "content": "PM模块如何实现设备维护计划生成"}, {"role": "assistant", "content": "需满足：\n1. 包路径com.company.erp.pm.scheduler\n2. 基于设备使用频率计算\n3. 集成日历服务"}, {"role": "user", "content": "class Scheduler {\n    void generatePlan() {}\n}"}, {"role": "assistant", "content": "需要修正：\n1. 添加PM_前缀\n2. 处理设备数据异常\n3. 添加@Scheduled注解\n完整代码：\npackage com.company.erp.pm.scheduler;\n\n@Scheduled(cron = \"0 0 1 * * ?\")\npublic class PM_MaintenanceScheduler {\n    public void generateMaintenancePlan() throws EquipmentException {\n        // 生成逻辑\n    }\n}"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-HCM-006", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现HCM模块的考勤计算，要求：\n1. 包路径com.company.erp.hcm.service\n2. 考虑节假日配置\n3. 支持多种考勤规则", "output": "package com.company.erp.hcm.service;\n\n@Service\npublic class HCM_AttendanceCalculator {\n    public AttendanceResult calculate(LocalDate date, Employee employee) {\n        if (holidayService.isHoliday(date)) {\n            return new AttendanceResult(HOLIDAY);\n        }\n        // 其他规则处理\n    }\n}"}

{"id": "MOD-AM-007", "type": "single-turn", "case": "positive", "language": "sql", "instruction": "创建AM模块的资产折旧表，要求：\n1. 表前缀EAM_\n2. 包含折旧方法字段\n3. 使用年数总和法计算", "output": "CREATE TABLE EAM_Depreciation (\n    AssetID BIGINT PRIMARY KEY,\n    DepreciationMethod VARCHAR(20) CHECK (DepreciationMethod IN ('SLN','SYD','DB')),\n    UsefulLife INT,\n    SYD_Sum INT GENERATED ALWAYS AS (UsefulLife*(UsefulLife+1)/2) STORED\n)"}

{"messages": [{"role": "user", "content": "QM模块如何配置质检流程"}, {"role": "assistant", "content": "应包含：\n1. QualityProcess节点\n2. 定义检验级别(AQL)\n3. 设置抽样规则"}, {"role": "user", "content": "<QualityCheck standard=\"ISO\"/>"}, {"role": "assistant", "content": "需要完善：\n<QualityProcess>\n  <InspectionLevel>AQL-1.0</InspectionLevel>\n  <SamplingRule>\n    <LotSize>1000</LotSize>\n    <SampleSize>80</SampleSize>\n  </SamplingRule>\n</QualityProcess>"}], "type": "multi-turn", "case": "negative"}

{"id": "MOD-PS-009", "type": "single-turn", "case": "positive", "language": "java", "instruction": "实现PS模块的项目进度计算，要求：\n1. 包路径com.company.erp.ps.service\n2. 使用关键路径算法\n3. 处理进度偏差预警", "output": "package com.company.erp.ps.service;\n\npublic class PS_ProjectScheduler {\n    public ScheduleResult calculateCriticalPath(Project project) {\n        // 关键路径算法实现\n        if (variance > 0.1) {\n            alertService.triggerAlert(project);\n        }\n    }\n}"}

{"id": "MOD-RE-010", "type": "single-turn", "case": "positive", "language": "xml", "instruction": "配置RE模块的楼宇信息表单，要求：\n1. 表单Key带RE_前缀\n2. 包含楼层平面图上传\n3. 绑定不动产DataObject", "output": "<Form Key=\"RE_BuildingInfo\" FormType=\"Entity\">\n  <DataSource RefObjectKey=\"RE_Building\"/>\n  <Body>\n    <FileUploader Key=\"FloorPlan\" AllowedTypes=\"PDF,DWG\"/>\n  </Body>\n</Form>"}
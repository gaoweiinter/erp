[
    {
    "instruction": "Create a Material master data entity class following ERP naming conventions",
    "input": "Implement a Material entity class in the MM module with fields: material code, description, material type, and base unit of measure. Include proper getter/setter methods.",
    "output": "package com.company.erp.mm.entity;\n\npublic class MM_Material extends AbstractMasterEntity {\n    public static final String ENTITY_NAME = \"MM_Material\";\n    \n    public static final String MaterialCode = \"MaterialCode\";\n    public static final String Description = \"Description\";\n    public static final String MaterialType = \"MaterialType\";\n    public static final String BaseUOM = \"BaseUOM\";\n    \n    public String getMaterialCode() throws Throwable {\n        return value_String(\"MaterialCode\");\n    }\n    \n    public MM_Material setMaterialCode(String value) throws Throwable {\n        setValue(\"MaterialCode\", value);\n        return this;\n    }\n    \n    public String getDescription() throws Throwable {\n        return value_String(\"Description\");\n    }\n    \n    public MM_Material setDescription(String value) throws Throwable {\n        setValue(\"Description\", value);\n        return this;\n    }\n    \n    public String getMaterialType() throws Throwable {\n        return value_String(\"MaterialType\");\n    }\n    \n    public MM_Material setMaterialType(String value) throws Throwable {\n        setValue(\"MaterialType\", value);\n        return this;\n    }\n    \n    public String getBaseUOM() throws Throwable {\n        return value_String(\"BaseUOM\");\n    }\n    \n    public MM_Material setBaseUOM(String value) throws Throwable {\n        setValue(\"BaseUOM\", value);\n        return this;\n    }\n}"
    },
    {
    "instruction": "Implement a Purchase Order entity with header and items structure",
    "input": "Create a PO entity class in the MM module that includes header fields (PO number, vendor, date) and supports item details. Follow the ERP module naming conventions.",
    "output": "package com.company.erp.mm.entity;\n\npublic class MM_PurchaseOrder extends AbstractBillEntity {\n    public static final String ENTITY_NAME = \"MM_PurchaseOrder\";\n    \n    // Header fields\n    public static final String PONumber = \"PONumber\";\n    public static final String VendorID = \"VendorID\";\n    public static final String PODate = \"PODate\";\n    \n    public String getPONumber() throws Throwable {\n        return value_String(\"PONumber\");\n    }\n    \n    public MM_PurchaseOrder setPONumber(String value) throws Throwable {\n        setValue(\"PONumber\", value);\n        return this;\n    }\n    \n    public Long getVendorID() throws Throwable {\n        return value_Long(\"VendorID\");\n    }\n    \n    public MM_PurchaseOrder setVendorID(Long value) throws Throwable {\n        setValue(\"VendorID\", value);\n        return this;\n    }\n    \n    public Date getPODate() throws Throwable {\n        return value_Date(\"PODate\");\n    }\n    \n    public MM_PurchaseOrder setPODate(Date value) throws Throwable {\n        setValue(\"PODate\", value);\n        return this;\n    }\n    \n    // Item collection handling\n    public DataTable getItems() throws Throwable {\n        return getDetailTable(\"Items\");\n    }\n}"
    },
    {
    "instruction": "Create a DataObject configuration for Material master data",
    "input": "Define XML DataObject configuration for Material entity with primary table EMM_Material and essential fields.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataObject Key=\"MM_Material\" Caption=\"Material Master\" PrimaryTableKey=\"EMM_Material\">\n    <TableCollection>\n        <Table Key=\"EMM_Material\" Caption=\"Material\">\n            <Column Key=\"OID\" Caption=\"Object ID\" DataType=\"Long\" IsPrimaryKey=\"true\" />\n            <Column Key=\"MaterialCode\" Caption=\"Material Code\" DataType=\"String\" Length=\"40\" IsRequired=\"true\" />\n            <Column Key=\"Description\" Caption=\"Description\" DataType=\"String\" Length=\"200\" IsRequired=\"true\" />\n            <Column Key=\"MaterialType\" Caption=\"Material Type\" DataType=\"String\" Length=\"2\" IsRequired=\"true\" />\n            <Column Key=\"BaseUOM\" Caption=\"Base UOM\" DataType=\"String\" Length=\"3\" IsRequired=\"true\" />\n            <Column Key=\"Status\" Caption=\"Status\" DataType=\"String\" Length=\"1\" IsRequired=\"true\" />\n            <Column Key=\"Creator\" Caption=\"Creator\" DataType=\"String\" Length=\"20\" IsRequired=\"true\" />\n            <Column Key=\"CreateTime\" Caption=\"Create Time\" DataType=\"DateTime\" IsRequired=\"true\" />\n            <Column Key=\"Modifier\" Caption=\"Modifier\" DataType=\"String\" Length=\"20\" />\n            <Column Key=\"ModifyTime\" Caption=\"Modify Time\" DataType=\"DateTime\" />\n        </Table>\n    </TableCollection>\n</DataObject>"
    },
    {
    "instruction": "Create a business formula for material creation",
    "input": "Implement a formula class for material creation that validates material code uniqueness and handles material type configuration.",
    "output": "package com.company.erp.mm.formula;\n\npublic class MaterialCreateFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        // Wrong implementation: Missing parameter validation\n        MM_Material material = getDataObject();\n        \n        // Error: No transaction management\n        material.setStatus(\"A\");\n        \n        // Wrong: Direct SQL query without using proper API\n        String sql = \"INSERT INTO EMM_Material (MaterialCode) VALUES ('\" + material.getMaterialCode() + \"')\";\n        \n        // Missing: Material type validation\n        // Missing: Duplicate check\n        // Missing: Error handling\n        // Missing: Audit logging\n    }\n}"
    },
    {
    "instruction": "Create a cache-enabled DataObject configuration for frequently accessed customer data",
    "input": "Define a DataObject configuration for customer master data that utilizes cache table for better performance. Include cache refresh mechanism.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataObject Key=\"SD_Customer\" Caption=\"Customer Master\" PrimaryTableKey=\"ESD_Customer\" EnableCache=\"true\">\n    <TableCollection>\n        <Table Key=\"ESD_Customer\" Caption=\"Customer\">\n            <Column Key=\"OID\" Caption=\"Object ID\" DataType=\"Long\" IsPrimaryKey=\"true\" />\n            <Column Key=\"CustomerCode\" Caption=\"Customer Code\" DataType=\"String\" Length=\"20\" IsRequired=\"true\" IsIndex=\"true\" />\n            <Column Key=\"CustomerName\" Caption=\"Customer Name\" DataType=\"String\" Length=\"100\" IsRequired=\"true\" IsIndex=\"true\" />\n        </Table>\n        <Table Key=\"EGS_CustomerCache\" Caption=\"Customer Cache\" IsCache=\"true\">\n            <Column Key=\"OID\" Caption=\"Object ID\" DataType=\"Long\" IsPrimaryKey=\"true\" />\n            <Column Key=\"CustomerCode\" Caption=\"Customer Code\" DataType=\"String\" Length=\"20\" />\n            <Column Key=\"CustomerName\" Caption=\"Customer Name\" DataType=\"String\" Length=\"100\" />\n            <Column Key=\"LastRefreshTime\" Caption=\"Last Refresh Time\" DataType=\"DateTime\" />\n        </Table>\n    </TableCollection>\n    <CacheConfig RefreshInterval=\"3600\" MaxItems=\"10000\" />\n</DataObject>"
    },
    {
    "instruction": "Implement a business formula with proper transaction and performance handling",
    "input": "Create a formula class for batch processing purchase orders that includes transaction management, batch operations, and proper error handling.",
    "output": "package com.company.erp.mm.formula;\n\npublic class POBatchProcessFormula extends EntityContextAction {\n    private static final int BATCH_SIZE = 1000;\n    \n    @Override\n    public void execute() throws Throwable {\n        // Get parameters\n        DataTable poList = getParameterTable(\"POList\");\n        if (poList == null || poList.getRowCount() == 0) {\n            return;\n        }\n        \n        // Begin transaction\n        beginTransaction();\n        try {\n            // Process in batches for better performance\n            int totalCount = poList.getRowCount();\n            for (int i = 0; i < totalCount; i += BATCH_SIZE) {\n                int batchSize = Math.min(BATCH_SIZE, totalCount - i);\n                processBatch(poList, i, batchSize);\n                \n                // Commit each batch\n                commitTransaction();\n                if (i + BATCH_SIZE < totalCount) {\n                    beginTransaction();\n                }\n            }\n            \n            // Update cache\n            refreshPOCache();\n            \n        } catch (Throwable e) {\n            rollbackTransaction();\n            logError(\"Batch processing failed\", e);\n            throw e;\n        }\n    }\n    \n    private void processBatch(DataTable poList, int startIndex, int batchSize) throws Throwable {\n        // Prepare batch parameters\n        List<Object[]> batchParams = new ArrayList<>();\n        for (int i = startIndex; i < startIndex + batchSize; i++) {\n            batchParams.add(new Object[]{\n                poList.getValue(i, \"PONumber\"),\n                poList.getValue(i, \"Status\")\n            });\n        }\n        \n        // Execute batch update\n        String sql = \"UPDATE EMM_PurchaseOrderHead SET Status = ? WHERE PONumber = ?\";\n        executeBatchUpdate(sql, batchParams);\n    }\n    \n    private void refreshPOCache() throws Throwable {\n        executeUpdate(\"DELETE FROM EGM_POCache WHERE LastRefreshTime < ?\", \n            new Object[]{getCurrentTime().addHours(-1)});\n    }\n}"
    },
    {
    "instruction": "Create a data validation formula with security checks",
    "input": "Implement a formula class for validating customer credit limit changes that includes proper authorization checks and data validation rules.",
    "output": "package com.company.erp.sd.formula;\n\npublic class CustomerCreditLimitUpdateFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        // 1. Security check\n        if (!hasPermission(\"SD_CUSTOMER_CREDIT_UPDATE\")) {\n            throw new SecurityException(\"No permission to update credit limit\");\n        }\n        \n        // 2. Get data\n        SD_Customer customer = getDataObject();\n        BigDecimal newLimit = getParameterBigDecimal(\"NewCreditLimit\");\n        String reason = getParameterString(\"UpdateReason\");\n        \n        // 3. Validate input\n        validateInput(customer, newLimit, reason);\n        \n        // 4. Begin transaction\n        beginTransaction();\n        try {\n            // 5. Update credit limit with audit trail\n            updateCreditLimit(customer, newLimit, reason);\n            \n            // 6. Commit changes\n            commitTransaction();\n            \n            // 7. Log operation\n            logOperation(\"CREDIT_LIMIT_UPDATE\", String.format(\n                \"Customer: %s, Old: %s, New: %s\", \n                customer.getCustomerCode(),\n                customer.getCreditLimit(),\n                newLimit\n            ));\n            \n        } catch (Throwable e) {\n            rollbackTransaction();\n            throw e;\n        }\n    }\n    \n    private void validateInput(SD_Customer customer, BigDecimal newLimit, String reason) throws Throwable {\n        // Required fields check\n        if (newLimit == null) {\n            throw new BusinessException(\"New credit limit is required\");\n        }\n        if (StringUtil.isEmpty(reason)) {\n            throw new BusinessException(\"Update reason is required\");\n        }\n        \n        // Business rules validation\n        if (newLimit.compareTo(BigDecimal.ZERO) < 0) {\n            throw new BusinessException(\"Credit limit cannot be negative\");\n        }\n        \n        BigDecimal oldLimit = customer.getCreditLimit();\n        if (newLimit.compareTo(oldLimit.multiply(new BigDecimal(\"2\"))) > 0) {\n            throw new BusinessException(\"Credit limit increase cannot exceed 100%\");\n        }\n    }\n    \n    private void updateCreditLimit(SD_Customer customer, BigDecimal newLimit, String reason) throws Throwable {\n        // Update main record\n        customer.setCreditLimit(newLimit);\n        \n        // Create audit record\n        SD_CustomerCreditHistory history = new SD_CustomerCreditHistory();\n        history.setCustomerID(customer.getOID());\n        history.setOldLimit(customer.getCreditLimit());\n        history.setNewLimit(newLimit);\n        history.setUpdateReason(reason);\n        history.setUpdateTime(getCurrentTime());\n        history.setUpdater(getCurrentUser());\n        \n        saveDataObject(history);\n    }\n}"
    },
    {
    "instruction": "Create a high-performance query formula for sales analysis",
    "input": "Implement a formula class for generating sales analysis report that handles large datasets efficiently using proper indexing and batch processing.",
    "output": "package com.company.erp.sd.formula;\n\npublic class SalesAnalysisFormula extends EntityContextAction {\n    private static final int FETCH_SIZE = 5000;\n    \n    @Override\n    public void execute() throws Throwable {\n        // Get parameters\n        Date startDate = getParameterDate(\"StartDate\");\n        Date endDate = getParameterDate(\"EndDate\");\n        \n        // Validate parameters\n        if (startDate == null || endDate == null) {\n            throw new BusinessException(\"Date range is required\");\n        }\n        \n        // Use prepared statement for better performance\n        String sql = \"SELECT CustomerID, MaterialID, SUM(Quantity) as TotalQty, \" +\n                    \"SUM(Amount) as TotalAmount FROM ESD_SalesOrderDetail d \" +\n                    \"INNER JOIN ESD_SalesOrderHead h ON d.POID = h.OID \" +\n                    \"WHERE h.OrderDate BETWEEN ? AND ? \" +\n                    \"GROUP BY CustomerID, MaterialID\";\n        \n        // Set fetch size for large result sets\n        setFetchSize(FETCH_SIZE);\n        \n        // Execute query and process results in batches\n        DataTable results = executeQuery(sql, new Object[]{startDate, endDate});\n        \n        // Create cache for lookup values\n        Map<Long, String> customerCache = new HashMap<>();\n        Map<Long, String> materialCache = new HashMap<>();\n        \n        // Process results\n        DataTable summary = new DataTable();\n        summary.addColumn(\"CustomerName\", DataType.STRING);\n        summary.addColumn(\"MaterialName\", DataType.STRING);\n        summary.addColumn(\"TotalQuantity\", DataType.DECIMAL);\n        summary.addColumn(\"TotalAmount\", DataType.DECIMAL);\n        \n        for (int i = 0; i < results.getRowCount(); i++) {\n            Long customerId = results.getValue(i, \"CustomerID\");\n            Long materialId = results.getValue(i, \"MaterialID\");\n            \n            // Use cache to avoid repeated lookups\n            String customerName = customerCache.computeIfAbsent(customerId, \n                this::getCustomerName);\n            String materialName = materialCache.computeIfAbsent(materialId,\n                this::getMaterialName);\n            \n            summary.addRow(new Object[]{\n                customerName,\n                materialName,\n                results.getValue(i, \"TotalQty\"),\n                results.getValue(i, \"TotalAmount\")\n            });\n        }\n        \n        // Set result\n        setResult(\"SalesSummary\", summary);\n    }\n    \n    private String getCustomerName(Long customerId) {\n        try {\n            return executeScalar(\n                \"SELECT CustomerName FROM ESD_Customer WHERE OID = ?\",\n                new Object[]{customerId}\n            ).toString();\n        } catch (Throwable e) {\n            return \"Unknown\";\n        }\n    }\n    \n    private String getMaterialName(Long materialId) {\n        try {\n            return executeScalar(\n                \"SELECT Description FROM EMM_Material WHERE OID = ?\",\n                new Object[]{materialId}\n            ).toString();\n        } catch (Throwable e) {\n            return \"Unknown\";\n        }\n    }\n}"
    },
    {
    "instruction": "Create a secure data access configuration for sensitive financial data",
    "input": "Define a DataObject configuration for financial journal entries with proper data access control and field-level security settings.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataObject Key=\"FI_JournalEntry\" Caption=\"Journal Entry\" PrimaryTableKey=\"EFI_JournalEntryHead\" SecurityLevel=\"High\">\n    <SecurityConfig>\n        <RoleAccess>\n            <Role Key=\"FI_ACCOUNTANT\" Access=\"ReadWrite\" />\n            <Role Key=\"FI_MANAGER\" Access=\"Full\" />\n            <Role Key=\"FI_VIEWER\" Access=\"ReadOnly\" />\n        </RoleAccess>\n        <FieldAccess>\n            <Field Key=\"Amount\">\n                <Role Key=\"FI_ACCOUNTANT\" Access=\"ReadWrite\" />\n                <Role Key=\"FI_VIEWER\" Access=\"ReadOnly\" Mask=\"true\" />\n            </Field>\n            <Field Key=\"AccountNo\">\n                <Role Key=\"FI_ACCOUNTANT\" Access=\"ReadOnly\" />\n                <Role Key=\"FI_MANAGER\" Access=\"ReadWrite\" />\n            </Field>\n        </FieldAccess>\n        <DataAccess>\n            <Filter Key=\"CompanyFilter\" Type=\"SQL\">\n                <![CDATA[\n                EXISTS (\n                    SELECT 1 FROM EFI_UserCompany \n                    WHERE UserID = {CurrentUser} \n                    AND CompanyID = {CompanyID}\n                )\n                ]]>\n            </Filter>\n        </DataAccess>\n    </SecurityConfig>\n    \n    <AuditConfig>\n        <AuditLog Enable=\"true\">\n            <Operation Type=\"Create\" LogLevel=\"Detail\" />\n            <Operation Type=\"Modify\" LogLevel=\"Detail\" />\n            <Operation Type=\"Delete\" LogLevel=\"Detail\" />\n            <Operation Type=\"Read\" LogLevel=\"Basic\" />\n        </AuditLog>\n    </AuditConfig>\n    \n    <TableCollection>\n        <Table Key=\"EFI_JournalEntryHead\" Caption=\"Journal Entry Header\">\n            <Column Key=\"OID\" Caption=\"Object ID\" DataType=\"Long\" IsPrimaryKey=\"true\" />\n            <Column Key=\"DocumentNo\" Caption=\"Document No\" DataType=\"String\" Length=\"20\" IsRequired=\"true\" IsEncrypted=\"false\" />\n            <Column Key=\"PostingDate\" Caption=\"Posting Date\" DataType=\"DateTime\" IsRequired=\"true\" />\n            <Column Key=\"CompanyID\" Caption=\"Company\" DataType=\"Long\" IsRequired=\"true\" />\n            <Column Key=\"Status\" Caption=\"Status\" DataType=\"String\" Length=\"2\" IsRequired=\"true\" />\n            <Column Key=\"TotalAmount\" Caption=\"Total Amount\" DataType=\"Decimal\" Length=\"18,2\" IsRequired=\"true\" />\n            <Column Key=\"Creator\" Caption=\"Creator\" DataType=\"String\" Length=\"50\" IsRequired=\"true\" />\n            <Column Key=\"CreateTime\" Caption=\"Create Time\" DataType=\"DateTime\" IsRequired=\"true\" />\n            <Column Key=\"Approver\" Caption=\"Approver\" DataType=\"String\" Length=\"50\" />\n            <Column Key=\"ApproveTime\" Caption=\"Approve Time\" DataType=\"DateTime\" />\n        </Table>\n        \n        <Table Key=\"EFI_JournalEntryDetail\" Caption=\"Journal Entry Detail\">\n            <Column Key=\"OID\" Caption=\"Object ID\" DataType=\"Long\" IsPrimaryKey=\"true\" />\n            <Column Key=\"POID\" Caption=\"Header ID\" DataType=\"Long\" IsRequired=\"true\" />\n            <Column Key=\"LineNo\" Caption=\"Line No\" DataType=\"Integer\" IsRequired=\"true\" />\n            <Column Key=\"AccountNo\" Caption=\"Account No\" DataType=\"String\" Length=\"20\" IsRequired=\"true\" IsEncrypted=\"true\" />\n            <Column Key=\"DebitAmount\" Caption=\"Debit Amount\" DataType=\"Decimal\" Length=\"18,2\" IsRequired=\"true\" />\n            <Column Key=\"CreditAmount\" Caption=\"Credit Amount\" DataType=\"Decimal\" Length=\"18,2\" IsRequired=\"true\" />\n            <Column Key=\"Description\" Caption=\"Description\" DataType=\"String\" Length=\"200\" />\n        </Table>\n    </TableCollection>\n</DataObject>"
    },
    {
    "instruction": "Create a custom grid control configuration for inventory tracking",
    "input": "Define XML configuration for a custom grid control that displays real-time inventory movements with color-coded stock levels and automatic refresh.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Form Key=\"WM_InventoryTracking\" Caption=\"Inventory Tracking\" FormType=\"List\">\n    <DataSource RefObjectKey=\"WM_StockMovement\">\n        <QueryConfig EnableLazyLoading=\"true\" PageSize=\"50\" AutoRefresh=\"true\" RefreshInterval=\"60\">\n            <DefaultSort>\n                <SortField TableKey=\"EWM_StockMovement\" ColumnKey=\"MovementTime\" Direction=\"DESC\" />\n            </DefaultSort>\n        </QueryConfig>\n    </DataSource>\n    \n    <OperationCollection>\n        <Operation Key=\"Refresh\" Caption=\"Refresh\">\n            <Action><![CDATA[Macro_Refresh;]]></Action>\n        </Operation>\n    </OperationCollection>\n    \n    <Body>\n        <Block>\n            <CustomGridPanel Key=\"StockGrid\" EnableColoring=\"true\">\n                <Column Key=\"WarehouseCode\" Caption=\"Warehouse\" Width=\"100\" Fixed=\"true\" />\n                <Column Key=\"MaterialCode\" Caption=\"Material\" Width=\"150\">\n                    <LinkControl>\n                        <DataBinding TableKey=\"EWM_StockMovement\" ColumnKey=\"MaterialID\" />\n                        <ActionScript>OpenForm(\"MM_Material\", \"{Value}\");</ActionScript>\n                    </LinkControl>\n                </Column>\n                <Column Key=\"StockLevel\" Caption=\"Stock Level\" Width=\"100\">\n                    <ColorRule>\n                        <Rule Condition=\"Value &lt; MinStock\" Color=\"#FF0000\" />\n                        <Rule Condition=\"Value &lt; SafetyStock\" Color=\"#FFA500\" />\n                        <Rule Condition=\"Value &gt; MaxStock\" Color=\"#0000FF\" />\n                    </ColorRule>\n                </Column>\n                <Column Key=\"MovementType\" Caption=\"Movement Type\" Width=\"120\">\n                    <DictBinding ItemKey=\"StockMovementType\" />\n                </Column>\n                <Column Key=\"Quantity\" Caption=\"Quantity\" Width=\"100\" Format=\"#,##0.000\">\n                    <ColorRule>\n                        <Rule Condition=\"Value &lt; 0\" Color=\"#FF0000\" />\n                        <Rule Condition=\"Value &gt; 0\" Color=\"#008000\" />\n                    </ColorRule>\n                </Column>\n                <Column Key=\"MovementTime\" Caption=\"Movement Time\" Width=\"150\" />\n                <Column Key=\"DocumentNo\" Caption=\"Document No\" Width=\"150\" />\n            </CustomGridPanel>\n        </Block>\n    </Body>\n    \n    <MacroCollection>\n        <Macro Key=\"Macro_Refresh\">\n            <![CDATA[\n            RefreshData;\n            UpdateStockLevels;\n            ]]>\n        </Macro>\n    </MacroCollection>\n    \n    <ScriptCollection>\n        <Script Key=\"UpdateStockLevels\">\n            <![CDATA[\n            function updateStockLevels() {\n                var grid = getControl(\"StockGrid\");\n                for (var i = 0; i < grid.getRowCount(); i++) {\n                    var stockLevel = grid.getValue(i, \"StockLevel\");\n                    var minStock = grid.getValue(i, \"MinStock\");\n                    var maxStock = grid.getValue(i, \"MaxStock\");\n                    grid.setRowBackground(i, getStockLevelColor(stockLevel, minStock, maxStock));\n                }\n            }\n            \n            function getStockLevelColor(stock, min, max) {\n                if (stock < min) return \"#FFEEEE\";\n                if (stock > max) return \"#EEEEFF\";\n                return \"#FFFFFF\";\n            }\n            ]]>\n        </Script>\n    </ScriptCollection>\n</Form>"
    },
    {
    "instruction": "Implement a comprehensive business rule validation formula",
    "input": "Create a formula class that implements complex business rules for sales order validation, including credit limit checks, inventory availability, and pricing rules.",
    "output": "package com.company.erp.sd.formula;\n\npublic class SalesOrderValidationFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        SD_SalesOrder order = getDataObject();\n        \n        // 1. Basic validation\n        validateBasicFields(order);\n        \n        // 2. Credit limit validation\n        validateCreditLimit(order);\n        \n        // 3. Inventory validation\n        validateInventoryAvailability(order);\n        \n        // 4. Pricing validation\n        validatePricing(order);\n        \n        // 5. Business policy validation\n        validateBusinessPolicies(order);\n        \n        // If all validations pass, update order status\n        order.setStatus(\"VALIDATED\");\n        logOperation(\"ORDER_VALIDATED\", order.getDocumentNumber());\n    }\n    \n    private void validateBasicFields(SD_SalesOrder order) throws Throwable {\n        // Required fields validation\n        if (order.getCustomerID() == null) {\n            throw new BusinessException(\"Customer is required\");\n        }\n        \n        DataTable items = order.getItems();\n        if (items == null || items.getRowCount() == 0) {\n            throw new BusinessException(\"Order must have at least one item\");\n        }\n        \n        // Order date validation\n        Date orderDate = order.getOrderDate();\n        if (orderDate.before(getCurrentDate())) {\n            throw new BusinessException(\"Order date cannot be in the past\");\n        }\n        \n        // Customer status validation\n        SD_Customer customer = loadDataObject(\"SD_Customer\", order.getCustomerID());\n        if (!\"A\".equals(customer.getStatus())) {\n            throw new BusinessException(\"Customer is not active\");\n        }\n    }\n    \n    private void validateCreditLimit(SD_SalesOrder order) throws Throwable {\n        SD_Customer customer = loadDataObject(\"SD_Customer\", order.getCustomerID());\n        BigDecimal creditLimit = customer.getCreditLimit();\n        \n        // Calculate current outstanding amount\n        String sql = \"SELECT SUM(Amount) FROM ESD_SalesOrderHead \" +\n                    \"WHERE CustomerID = ? AND Status IN ('NEW', 'APPROVED')\";\n        BigDecimal outstandingAmount = executeScalar(sql, new Object[]{order.getCustomerID()});\n        \n        // Add current order amount\n        BigDecimal totalExposure = outstandingAmount.add(order.getTotalAmount());\n        \n        if (totalExposure.compareTo(creditLimit) > 0) {\n            throw new BusinessException(String.format(\n                \"Order exceeds credit limit. Available: %s, Required: %s\",\n                creditLimit.subtract(outstandingAmount),\n                order.getTotalAmount()\n            ));\n        }\n    }\n    \n    private void validateInventoryAvailability(SD_SalesOrder order) throws Throwable {\n        DataTable items = order.getItems();\n        StringBuilder errorMsg = new StringBuilder();\n        \n        for (int i = 0; i < items.getRowCount(); i++) {\n            Long materialId = items.getValue(i, \"MaterialID\");\n            BigDecimal quantity = items.getValue(i, \"Quantity\");\n            \n            // Check available stock\n            String sql = \"SELECT AvailableQty FROM EWM_MaterialStock \" +\n                        \"WHERE MaterialID = ? AND WarehouseID = ?\";\n            BigDecimal availableQty = executeScalar(sql, \n                new Object[]{materialId, order.getWarehouseID()});\n            \n            if (quantity.compareTo(availableQty) > 0) {\n                if (errorMsg.length() > 0) errorMsg.append(\"\n\");\n                errorMsg.append(String.format(\n                    \"Insufficient stock for material %s. Available: %s, Required: %s\",\n                    getMaterialCode(materialId),\n                    availableQty,\n                    quantity\n                ));\n            }\n        }\n        \n        if (errorMsg.length() > 0) {\n            throw new BusinessException(errorMsg.toString());\n        }\n    }\n    \n    private void validatePricing(SD_SalesOrder order) throws Throwable {\n        DataTable items = order.getItems();\n        \n        for (int i = 0; i < items.getRowCount(); i++) {\n            Long materialId = items.getValue(i, \"MaterialID\");\n            BigDecimal unitPrice = items.getValue(i, \"UnitPrice\");\n            \n            // Get valid price from price list\n            String sql = \"SELECT Price FROM ESD_PriceList \" +\n                        \"WHERE MaterialID = ? AND CustomerGroup = ? \" +\n                        \"AND ValidFrom <= ? AND ValidTo >= ?\";\n            BigDecimal validPrice = executeScalar(sql, new Object[]{\n                materialId,\n                getCustomerGroup(order.getCustomerID()),\n                getCurrentDate(),\n                getCurrentDate()\n            });\n            \n            if (unitPrice.compareTo(validPrice) < 0) {\n                throw new BusinessException(String.format(\n                    \"Price for material %s is below minimum allowed price\",\n                    getMaterialCode(materialId)\n                ));\n            }\n        }\n    }\n    \n    private void validateBusinessPolicies(SD_SalesOrder order) throws Throwable {\n        // Validate order value meets minimum requirement\n        BigDecimal minOrderValue = getSystemParameter(\"MIN_ORDER_VALUE\");\n        if (order.getTotalAmount().compareTo(minOrderValue) < 0) {\n            throw new BusinessException(String.format(\n                \"Order value must be at least %s\",\n                minOrderValue\n            ));\n        }\n        \n        // Validate delivery date\n        int maxDeliveryDays = getSystemParameter(\"MAX_DELIVERY_DAYS\");\n        if (order.getDeliveryDate().after(\n                DateUtil.addDays(getCurrentDate(), maxDeliveryDays))) {\n            throw new BusinessException(String.format(\n                \"Delivery date cannot exceed %d days from today\",\n                maxDeliveryDays\n            ));\n        }\n    }\n}"
    },
    {
    "instruction": "Create a factory formula for generating account entries",
    "input": "Implement a formula class that automatically generates accounting entries based on different business transactions like sales order, purchase order, and payment.",
    "output": "package com.company.erp.fi.formula;\n\npublic class AccountEntryFactoryFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        // Get document information\n        String documentType = getParameterString(\"DocumentType\");\n        Long documentID = getParameterLong(\"DocumentID\");\n        \n        // Begin transaction\n        beginTransaction();\n        try {\n            // Generate entries based on document type\n            switch (documentType) {\n                case \"SO\":\n                    generateSalesOrderEntries(documentID);\n                    break;\n                case \"PO\":\n                    generatePurchaseOrderEntries(documentID);\n                    break;\n                case \"PAY\":\n                    generatePaymentEntries(documentID);\n                    break;\n                default:\n                    throw new BusinessException(\"Unsupported document type: \" + documentType);\n            }\n            \n            // Commit transaction\n            commitTransaction();\n            \n        } catch (Throwable e) {\n            rollbackTransaction();\n            throw e;\n        }\n    }\n    \n    private void generateSalesOrderEntries(Long orderID) throws Throwable {\n        SD_SalesOrder order = loadDataObject(\"SD_SalesOrder\", orderID);\n        \n        // 1. Sales revenue entry\n        FI_JournalEntry salesEntry = new FI_JournalEntry();\n        salesEntry.setDocumentType(\"SO\");\n        salesEntry.setDocumentID(orderID);\n        salesEntry.setPostingDate(getCurrentDate());\n        \n        // Debit: Accounts Receivable\n        addJournalLine(salesEntry, \"1100\", order.getTotalAmount(), null);\n        // Credit: Sales Revenue\n        addJournalLine(salesEntry, \"4100\", null, order.getTotalAmount());\n        // Credit: Sales Tax Payable\n        if (order.getTotalTax().compareTo(BigDecimal.ZERO) > 0) {\n            addJournalLine(salesEntry, \"2200\", null, order.getTotalTax());\n        }\n        \n        saveDataObject(salesEntry);\n    }\n    \n    private void generatePurchaseOrderEntries(Long orderID) throws Throwable {\n        MM_PurchaseOrder order = loadDataObject(\"MM_PurchaseOrder\", orderID);\n        \n        // Purchase entry\n        FI_JournalEntry purchaseEntry = new FI_JournalEntry();\n        purchaseEntry.setDocumentType(\"PO\");\n        purchaseEntry.setDocumentID(orderID);\n        purchaseEntry.setPostingDate(getCurrentDate());\n        \n        // Debit: Inventory\n        addJournalLine(purchaseEntry, \"1300\", order.getTotalAmount(), null);\n        // Credit: Accounts Payable\n        addJournalLine(purchaseEntry, \"2100\", null, order.getTotalAmount());\n        \n        saveDataObject(purchaseEntry);\n    }\n    \n    private void generatePaymentEntries(Long paymentID) throws Throwable {\n        FI_Payment payment = loadDataObject(\"FI_Payment\", paymentID);\n        \n        // Payment entry\n        FI_JournalEntry paymentEntry = new FI_JournalEntry();\n        paymentEntry.setDocumentType(\"PAY\");\n        paymentEntry.setDocumentID(paymentID);\n        paymentEntry.setPostingDate(getCurrentDate());\n        \n        if (\"AP\".equals(payment.getPaymentType())) {\n            // Debit: Accounts Payable\n            addJournalLine(paymentEntry, \"2100\", payment.getAmount(), null);\n            // Credit: Bank\n            addJournalLine(paymentEntry, \"1001\", null, payment.getAmount());\n        } else if (\"AR\".equals(payment.getPaymentType())) {\n            // Debit: Bank\n            addJournalLine(paymentEntry, \"1001\", payment.getAmount(), null);\n            // Credit: Accounts Receivable\n            addJournalLine(paymentEntry, \"1100\", null, payment.getAmount());\n        }\n        \n        saveDataObject(paymentEntry);\n    }\n    \n    private void addJournalLine(FI_JournalEntry entry, String accountNo, \n            BigDecimal debit, BigDecimal credit) throws Throwable {\n        DataTable lines = entry.getLines();\n        if (lines == null) {\n            lines = new DataTable();\n            lines.addColumn(\"LineNo\", DataType.INTEGER);\n            lines.addColumn(\"AccountNo\", DataType.STRING);\n            lines.addColumn(\"DebitAmount\", DataType.DECIMAL);\n            lines.addColumn(\"CreditAmount\", DataType.DECIMAL);\n            entry.setLines(lines);\n        }\n        \n        lines.addRow(new Object[]{\n            lines.getRowCount() + 1,\n            accountNo,\n            debit,\n            credit\n        });\n    }\n}"
    },
    {
    "instruction": "Create a product cost calculation formula",
    "input": "Implement a formula class for calculating product cost considering material cost, labor cost, overhead cost, and machine cost. Include proper cost allocation methods.",
    "output": "package com.company.erp.co.formula;\n\npublic class ProductCostCalculationFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        // Get parameters\n        Long productID = getParameterLong(\"ProductID\");\n        String costVersion = getParameterString(\"CostVersion\");\n        Date effectiveDate = getParameterDate(\"EffectiveDate\");\n        \n        // Load product BOM\n        MM_Material product = loadDataObject(\"MM_Material\", productID);\n        CO_ProductCost costObject = new CO_ProductCost();\n        costObject.setProductID(productID);\n        costObject.setCostVersion(costVersion);\n        costObject.setEffectiveDate(effectiveDate);\n        \n        try {\n            // 1. Calculate material cost\n            calculateMaterialCost(costObject);\n            \n            // 2. Calculate labor cost\n            calculateLaborCost(costObject);\n            \n            // 3. Calculate machine cost\n            calculateMachineCost(costObject);\n            \n            // 4. Calculate overhead cost\n            calculateOverheadCost(costObject);\n            \n            // 5. Calculate total cost\n            calculateTotalCost(costObject);\n            \n            // Save cost object\n            saveDataObject(costObject);\n            \n            // Log cost calculation\n            logOperation(\"COST_CALC\", String.format(\n                \"Product: %s, Version: %s, Total Cost: %s\",\n                product.getMaterialCode(),\n                costVersion,\n                costObject.getTotalCost()\n            ));\n            \n        } catch (Throwable e) {\n            logError(\"Cost calculation failed\", e);\n            throw e;\n        }\n    }\n    \n    private void calculateMaterialCost(CO_ProductCost costObject) throws Throwable {\n        DataTable bom = getBOMComponents(costObject.getProductID());\n        BigDecimal totalMaterialCost = BigDecimal.ZERO;\n        \n        for (int i = 0; i < bom.getRowCount(); i++) {\n            Long materialID = bom.getValue(i, \"MaterialID\");\n            BigDecimal quantity = bom.getValue(i, \"Quantity\");\n            \n            // Get material standard cost\n            BigDecimal standardCost = getMaterialStandardCost(\n                materialID, costObject.getCostVersion());\n            \n            totalMaterialCost = totalMaterialCost.add(\n                standardCost.multiply(quantity));\n        }\n        \n        costObject.setMaterialCost(totalMaterialCost);\n    }\n    \n    private void calculateLaborCost(CO_ProductCost costObject) throws Throwable {\n        DataTable operations = getProductOperations(costObject.getProductID());\n        BigDecimal totalLaborCost = BigDecimal.ZERO;\n        \n        for (int i = 0; i < operations.getRowCount(); i++) {\n            Long operationID = operations.getValue(i, \"OperationID\");\n            BigDecimal laborTime = operations.getValue(i, \"LaborTime\");\n            \n            // Get labor rate\n            BigDecimal laborRate = getLaborRate(\n                operationID, costObject.getCostVersion());\n            \n            totalLaborCost = totalLaborCost.add(\n                laborRate.multiply(laborTime));\n        }\n        \n        costObject.setLaborCost(totalLaborCost);\n    }\n    \n    private void calculateMachineCost(CO_ProductCost costObject) throws Throwable {\n        DataTable operations = getProductOperations(costObject.getProductID());\n        BigDecimal totalMachineCost = BigDecimal.ZERO;\n        \n        for (int i = 0; i < operations.getRowCount(); i++) {\n            Long workCenterID = operations.getValue(i, \"WorkCenterID\");\n            BigDecimal machineTime = operations.getValue(i, \"MachineTime\");\n            \n            // Get machine rate\n            BigDecimal machineRate = getMachineRate(\n                workCenterID, costObject.getCostVersion());\n            \n            totalMachineCost = totalMachineCost.add(\n                machineRate.multiply(machineTime));\n        }\n        \n        costObject.setMachineCost(totalMachineCost);\n    }\n    \n    private void calculateOverheadCost(CO_ProductCost costObject) throws Throwable {\n        // Get overhead rates\n        BigDecimal materialOverheadRate = getOverheadRate(\n            \"MATERIAL\", costObject.getCostVersion());\n        BigDecimal laborOverheadRate = getOverheadRate(\n            \"LABOR\", costObject.getCostVersion());\n        \n        // Calculate overhead costs\n        BigDecimal materialOverhead = costObject.getMaterialCost()\n            .multiply(materialOverheadRate);\n        BigDecimal laborOverhead = costObject.getLaborCost()\n            .multiply(laborOverheadRate);\n        \n        costObject.setOverheadCost(materialOverhead.add(laborOverhead));\n    }\n    \n    private void calculateTotalCost(CO_ProductCost costObject) throws Throwable {\n        costObject.setTotalCost(\n            costObject.getMaterialCost()\n            .add(costObject.getLaborCost())\n            .add(costObject.getMachineCost())\n            .add(costObject.getOverheadCost())\n        );\n    }\n    \n    private BigDecimal getMaterialStandardCost(Long materialID, String version) \n            throws Throwable {\n        return executeScalar(\n            \"SELECT StandardCost FROM ECO_MaterialCost \" +\n            \"WHERE MaterialID = ? AND CostVersion = ?\",\n            new Object[]{materialID, version}\n        );\n    }\n    \n    private BigDecimal getLaborRate(Long operationID, String version) \n            throws Throwable {\n        return executeScalar(\n            \"SELECT LaborRate FROM ECO_OperationCost \" +\n            \"WHERE OperationID = ? AND CostVersion = ?\",\n            new Object[]{operationID, version}\n        );\n    }\n    \n    private BigDecimal getMachineRate(Long workCenterID, String version) \n            throws Throwable {\n        return executeScalar(\n            \"SELECT MachineRate FROM ECO_WorkCenterCost \" +\n            \"WHERE WorkCenterID = ? AND CostVersion = ?\",\n            new Object[]{workCenterID, version}\n        );\n    }\n    \n    private BigDecimal getOverheadRate(String costType, String version) \n            throws Throwable {\n        return executeScalar(\n            \"SELECT Rate FROM ECO_OverheadRate \" +\n            \"WHERE CostType = ? AND CostVersion = ?\",\n            new Object[]{costType, version}\n        );\n    }\n}"
    },
    {
    "instruction": "Create a workflow with incorrect security configuration",
    "input": "Define an XML workflow for invoice approval that demonstrates common security configuration mistakes.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Incorrect: Missing security constraint definitions -->\n<Workflow Key=\"invoice_approval\" Caption=\"Invoice Approval\">\n    <!-- Wrong: Incorrect module prefix, should be FI_InvoiceApproval -->\n    <DocumentType>Invoice</DocumentType>\n    \n    <!-- Wrong: No initial status defined -->\n    <StatusFlow>\n        <Status Key=\"new\" Caption=\"New\">\n            <!-- Wrong: Missing action security checks -->\n            <NextStatus Key=\"approved\" Action=\"approve\" />\n        </Status>\n        <Status Key=\"approved\" Caption=\"Approved\" />\n    </StatusFlow>\n    \n    <!-- Wrong: No role-based access control -->\n    <ApprovalFlow>\n        <Level Key=\"L1\">\n            <!-- Wrong: Hard-coded user instead of role -->\n            <Approver Type=\"User\" Key=\"admin\" />\n            <!-- Wrong: No validation on amount -->\n            <Condition>Amount <= 10000</Condition>\n        </Level>\n    </ApprovalFlow>\n    \n    <!-- Wrong: Missing audit logging configuration -->\n    <NotificationConfig>\n        <Event Key=\"StatusChange\">\n            <!-- Wrong: No template validation -->\n            <Template>Payment approved for ${Amount}</Template>\n            <!-- Wrong: No recipient validation -->\n            <Recipients>all_users</Recipients>\n        </Event>\n    </NotificationConfig>\n</Workflow>"
    },
    {
    "instruction": "Create a configuration for batch job scheduling",
    "input": "Define an XML configuration for scheduling batch jobs with proper error handling, retry logic, and resource management.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<BatchJobConfig Key=\"FI_MonthEndClose\" Caption=\"Month End Closing Process\">\n    <Schedule>\n        <Trigger Type=\"CRON\">0 0 1 L * ?</Trigger>\n        <ValidPeriod>\n            <StartTime>18:00:00</StartTime>\n            <EndTime>06:00:00</EndTime>\n        </ValidPeriod>\n    </Schedule>\n    \n    <ResourceConfig>\n        <MaxConcurrent>3</MaxConcurrent>\n        <MaxMemory>2048M</MaxMemory>\n        <Timeout>3600</Timeout>\n    </ResourceConfig>\n    \n    <ErrorHandling>\n        <RetryConfig>\n            <MaxAttempts>3</MaxAttempts>\n            <RetryInterval>300</RetryInterval>\n            <BackoffMultiplier>2</BackoffMultiplier>\n        </RetryConfig>\n        <NotifyOnError>\n            <Role>FI_MANAGER</Role>\n            <Template>MonthEndClose_Error</Template>\n        </NotifyOnError>\n    </ErrorHandling>\n    \n    <Steps>\n        <Step Key=\"S1\" Caption=\"Validate Open Transactions\">\n            <Formula>FI_ValidateOpenTransactionsFormula</Formula>\n            <DependsOn></DependsOn>\n        </Step>\n        <Step Key=\"S2\" Caption=\"Process Accruals\">\n            <Formula>FI_ProcessAccrualsFormula</Formula>\n            <DependsOn>S1</DependsOn>\n        </Step>\n        <Step Key=\"S3\" Caption=\"Calculate Exchange Rates\">\n            <Formula>FI_CalculateExchangeRatesFormula</Formula>\n            <DependsOn>S1</DependsOn>\n        </Step>\n        <Step Key=\"S4\" Caption=\"Close Period\">\n            <Formula>FI_ClosePeriodFormula</Formula>\n            <DependsOn>S2,S3</DependsOn>\n        </Step>\n    </Steps>\n    \n    <Monitoring>\n        <Metrics>\n            <Metric Key=\"ProcessingTime\" Type=\"Timer\">\n                <Alert Threshold=\"7200\" Severity=\"WARNING\" />\n            </Metric>\n            <Metric Key=\"ErrorCount\" Type=\"Counter\">\n                <Alert Threshold=\"5\" Severity=\"ERROR\" />\n            </Metric>\n        </Metrics>\n        <Logging>\n            <Level>DEBUG</Level>\n            <Retention>30</Retention>\n        </Logging>\n    </Monitoring>\n</BatchJobConfig>"
    },
    {
    "instruction": "Create a data import configuration",
    "input": "Define an XML configuration for data import that includes field mapping, validation rules, and error handling.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DataImportConfig Key=\"MM_MaterialImport\" Caption=\"Material Master Import\">\n    <FileFormat>\n        <Type>CSV</Type>\n        <Delimiter>,</Delimiter>\n        <Encoding>UTF-8</Encoding>\n        <HasHeader>true</HasHeader>\n    </FileFormat>\n    \n    <FieldMapping>\n        <Field Source=\"Material Code\" Target=\"MaterialCode\">\n            <Validation>\n                <Required>true</Required>\n                <MaxLength>40</MaxLength>\n                <Pattern>[A-Z0-9]{1,40}</Pattern>\n                <Unique>true</Unique>\n            </Validation>\n        </Field>\n        <Field Source=\"Description\" Target=\"Description\">\n            <Validation>\n                <Required>true</Required>\n                <MaxLength>200</MaxLength>\n            </Validation>\n        </Field>\n        <Field Source=\"Material Type\" Target=\"MaterialType\">\n            <Validation>\n                <Required>true</Required>\n                <Length>2</Length>\n                <Dictionary>MaterialType</Dictionary>\n            </Validation>\n        </Field>\n        <Field Source=\"Base UOM\" Target=\"BaseUOM\">\n            <Validation>\n                <Required>true</Required>\n                <Length>3</Length>\n                <Dictionary>UnitOfMeasure</Dictionary>\n            </Validation>\n        </Field>\n    </FieldMapping>\n    \n    <ProcessingRules>\n        <BatchSize>1000</BatchSize>\n        <DuplicateHandling>Skip</DuplicateHandling>\n        <ErrorThreshold>0.05</ErrorThreshold>\n        <Transformations>\n            <Transform Field=\"MaterialCode\">\n                <![CDATA[\n                return value.toUpperCase().trim();\n                ]]>\n            </Transform>\n            <Transform Field=\"Description\">\n                <![CDATA[\n                return value.trim();\n                ]]>\n            </Transform>\n        </Transformations>\n    </ProcessingRules>\n    \n    <ErrorHandling>\n        <ErrorLog>\n            <Enabled>true</Enabled>\n            <Format>CSV</Format>\n            <Fields>\n                <Field>RowNumber</Field>\n                <Field>FieldName</Field>\n                <Field>ErrorType</Field>\n                <Field>ErrorMessage</Field>\n                <Field>RawValue</Field>\n            </Fields>\n        </ErrorLog>\n        <Notification>\n            <OnSuccess>\n                <Template>MaterialImport_Success</Template>\n                <Recipients>\n                    <Role>MM_MANAGER</Role>\n                </Recipients>\n            </OnSuccess>\n            <OnError>\n                <Template>MaterialImport_Error</Template>\n                <Recipients>\n                    <Role>MM_MANAGER</Role>\n                    <Role>SYSTEM_ADMIN</Role>\n                </Recipients>\n            </OnError>\n        </Notification>\n    </ErrorHandling>\n</DataImportConfig>"
    },
    {
    "instruction": "Create a Form configuration for master data maintenance",
    "input": "Define a Form configuration for material master data maintenance that includes tabs for basic info, purchasing info, and sales info. Include proper field validation and layout.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Form Key=\"MM_MaterialMaintenance\" Caption=\"Material Master Maintenance\" FormType=\"Entity\">\n    <DataSource RefObjectKey=\"MM_Material\" />\n    \n    <OperationCollection>\n        <Operation Key=\"Save\" Caption=\"Save\" Permission=\"MM_MATERIAL_EDIT\">\n            <Action><![CDATA[Macro_Save;]]></Action>\n        </Operation>\n        <Operation Key=\"Cancel\" Caption=\"Cancel\">\n            <Action><![CDATA[Macro_Cancel;]]></Action>\n        </Operation>\n    </OperationCollection>\n    \n    <Body>\n        <TabControl Key=\"MainTab\">\n            <TabPage Key=\"BasicInfo\" Caption=\"Basic Information\">\n                <GridLayoutPanel>\n                    <Label Key=\"Inner_MaterialCode\" Caption=\"Material Code\" />\n                    <TextEditor Key=\"MaterialCode\" Caption=\"Material Code\" TableKey=\"EMM_Material\">\n                        <DataBinding ColumnKey=\"MaterialCode\" />\n                        <Verification IsRequired=\"true\" MaxLength=\"40\" />\n                    </TextEditor>\n                    \n                    <Label Key=\"Inner_Description\" Caption=\"Description\" />\n                    <TextEditor Key=\"Description\" Caption=\"Description\" TableKey=\"EMM_Material\">\n                        <DataBinding ColumnKey=\"Description\" />\n                        <Verification IsRequired=\"true\" MaxLength=\"200\" />\n                    </TextEditor>\n                    \n                    <Label Key=\"Inner_MaterialType\" Caption=\"Material Type\" />\n                    <Dict Key=\"MaterialType\" Caption=\"Material Type\" TableKey=\"EMM_Material\" ItemKey=\"MaterialType\">\n                        <DataBinding ColumnKey=\"MaterialType\" />\n                        <Verification IsRequired=\"true\" />\n                    </Dict>\n                    \n                    <Label Key=\"Inner_BaseUOM\" Caption=\"Base UOM\" />\n                    <Dict Key=\"BaseUOM\" Caption=\"Base UOM\" TableKey=\"EMM_Material\" ItemKey=\"UnitOfMeasure\">\n                        <DataBinding ColumnKey=\"BaseUOM\" />\n                        <Verification IsRequired=\"true\" />\n                    </Dict>\n                </GridLayoutPanel>\n            </TabPage>\n            \n            <TabPage Key=\"PurchaseInfo\" Caption=\"Purchasing Information\">\n                <GridLayoutPanel>\n                    <Label Key=\"Inner_PurchaseUOM\" Caption=\"Purchase UOM\" />\n                    <Dict Key=\"PurchaseUOM\" Caption=\"Purchase UOM\" TableKey=\"EMM_Material\" ItemKey=\"UnitOfMeasure\">\n                        <DataBinding ColumnKey=\"PurchaseUOM\" />\n                    </Dict>\n                    \n                    <Label Key=\"Inner_MinOrderQty\" Caption=\"Min Order Qty\" />\n                    <NumberEditor Key=\"MinOrderQty\" Caption=\"Min Order Qty\" TableKey=\"EMM_Material\">\n                        <DataBinding ColumnKey=\"MinOrderQty\" />\n                        <Verification MinValue=\"0\" />\n                    </NumberEditor>\n                    \n                    <Label Key=\"Inner_LeadTime\" Caption=\"Lead Time (Days)\" />\n                    <NumberEditor Key=\"LeadTime\" Caption=\"Lead Time\" TableKey=\"EMM_Material\">\n                        <DataBinding ColumnKey=\"LeadTime\" />\n                        <Verification MinValue=\"0\" MaxValue=\"999\" />\n                    </NumberEditor>\n                </GridLayoutPanel>\n                \n                <GridPanel Key=\"SupplierList\" Caption=\"Approved Suppliers\">\n                    <DataBinding TableKey=\"EMM_MaterialSupplier\" />\n                    <Column Key=\"SupplierCode\" Caption=\"Supplier Code\" Width=\"120\" />\n                    <Column Key=\"SupplierName\" Caption=\"Supplier Name\" Width=\"200\" />\n                    <Column Key=\"IsPreferred\" Caption=\"Preferred\" Width=\"80\" />\n                    <Column Key=\"MinOrderQty\" Caption=\"MOQ\" Width=\"100\" />\n                    <Column Key=\"UnitPrice\" Caption=\"Unit Price\" Width=\"100\" />\n                </GridPanel>\n            </TabPage>\n            \n            <TabPage Key=\"SalesInfo\" Caption=\"Sales Information\">\n                <GridLayoutPanel>\n                    <Label Key=\"Inner_SalesUOM\" Caption=\"Sales UOM\" />\n                    <Dict Key=\"SalesUOM\" Caption=\"Sales UOM\" TableKey=\"EMM_Material\" ItemKey=\"UnitOfMeasure\">\n                        <DataBinding ColumnKey=\"SalesUOM\" />\n                    </Dict>\n                    \n                    <Label Key=\"Inner_MinSalesQty\" Caption=\"Min Sales Qty\" />\n                    <NumberEditor Key=\"MinSalesQty\" Caption=\"Min Sales Qty\" TableKey=\"EMM_Material\">\n                        <DataBinding ColumnKey=\"MinSalesQty\" />\n                        <Verification MinValue=\"0\" />\n                    </NumberEditor>\n                    \n                    <Label Key=\"Inner_SalesPrice\" Caption=\"Standard Price\" />\n                    <NumberEditor Key=\"SalesPrice\" Caption=\"Standard Price\" TableKey=\"EMM_Material\">\n                        <DataBinding ColumnKey=\"SalesPrice\" />\n                        <Verification MinValue=\"0\" />\n                    </NumberEditor>\n                </GridLayoutPanel>\n                \n                <GridPanel Key=\"PriceList\" Caption=\"Price List\">\n                    <DataBinding TableKey=\"EMM_MaterialPrice\" />\n                    <Column Key=\"CustomerGroup\" Caption=\"Customer Group\" Width=\"120\">\n                        <DictBinding ItemKey=\"CustomerGroup\" />\n                    </Column>\n                    <Column Key=\"Currency\" Caption=\"Currency\" Width=\"80\">\n                        <DictBinding ItemKey=\"Currency\" />\n                    </Column>\n                    <Column Key=\"UnitPrice\" Caption=\"Unit Price\" Width=\"100\" />\n                    <Column Key=\"ValidFrom\" Caption=\"Valid From\" Width=\"100\" />\n                    <Column Key=\"ValidTo\" Caption=\"Valid To\" Width=\"100\" />\n                </GridPanel>\n            </TabPage>\n        </TabControl>\n    </Body>\n    \n    <MacroCollection>\n        <Macro Key=\"Macro_Save\">\n            <![CDATA[\n            ValidateRequired;\n            ValidateBusinessRules;\n            SaveData;\n            if (IsNew) {\n                RefreshForm;\n            }\n            ]]>\n        </Macro>\n        <Macro Key=\"Macro_Cancel\">\n            <![CDATA[\n            if (IsDataChanged) {\n                if (Confirm(\"Discard changes?\")) {\n                    ClearData;\n                    CloseWindow;\n                }\n            } else {\n                CloseWindow;\n            }\n            ]]>\n        </Macro>\n    </MacroCollection>\n    \n    <ScriptCollection>\n        <Script Key=\"ValidateBusinessRules\">\n            <![CDATA[\n            function validateBusinessRules() {\n                var materialType = getValue(\"MaterialType\");\n                var salesPrice = getValue(\"SalesPrice\");\n                \n                if (materialType == \"FG\" && !salesPrice) {\n                    throw new Error(\"Sales price is required for finished goods\");\n                }\n                \n                if (getValue(\"MinOrderQty\") > getValue(\"MinSalesQty\")) {\n                    throw new Error(\"Minimum order quantity cannot exceed minimum sales quantity\");\n                }\n            }\n            ]]>\n        </Script>\n    </ScriptCollection>\n</Form>"
    },
    {
    "instruction": "Create a data integration formula for material master synchronization",
    "input": "Implement a formula class that synchronizes material master data with an external system, handling field mapping, data transformation, and error handling.",
    "output": "package com.company.erp.mm.formula;\n\npublic class MaterialSyncFormula extends EntityContextAction {\n    private static final String SYNC_LOG_TABLE = \"EMM_MaterialSyncLog\";\n    private static final int BATCH_SIZE = 500;\n    \n    @Override\n    public void execute() throws Throwable {\n        // Get sync parameters\n        String syncSource = getParameterString(\"SyncSource\");\n        Date lastSyncTime = getParameterDate(\"LastSyncTime\");\n        \n        // Begin sync process\n        beginTransaction();\n        try {\n            // 1. Get materials to sync\n            DataTable materialsToSync = getExternalMaterials(syncSource, lastSyncTime);\n            \n            // 2. Process in batches\n            int totalProcessed = 0;\n            int totalSuccess = 0;\n            int totalErrors = 0;\n            \n            for (int i = 0; i < materialsToSync.getRowCount(); i += BATCH_SIZE) {\n                int batchSize = Math.min(BATCH_SIZE, materialsToSync.getRowCount() - i);\n                DataTable batch = materialsToSync.getSubset(i, batchSize);\n                \n                // Process batch\n                BatchResult result = processBatch(batch, syncSource);\n                totalProcessed += result.processed;\n                totalSuccess += result.success;\n                totalErrors += result.errors;\n                \n                // Commit batch\n                commitTransaction();\n                if (i + BATCH_SIZE < materialsToSync.getRowCount()) {\n                    beginTransaction();\n                }\n            }\n            \n            // 3. Update sync status\n            updateSyncStatus(syncSource, getCurrentTime(), \n                totalProcessed, totalSuccess, totalErrors);\n            \n            // 4. Generate sync report\n            generateSyncReport(syncSource, totalProcessed, totalSuccess, totalErrors);\n            \n        } catch (Throwable e) {\n            rollbackTransaction();\n            logError(\"Material sync failed\", e);\n            throw e;\n        }\n    }\n    \n    private DataTable getExternalMaterials(String source, Date lastSyncTime) \n            throws Throwable {\n        // Get external system connection\n        ExternalSystem external = ExternalSystemFactory.getSystem(source);\n        \n        // Build query\n        Map<String, Object> params = new HashMap<>();\n        params.put(\"LastModified\", lastSyncTime);\n        \n        // Execute query\n        return external.executeQuery(\n            \"SELECT MaterialCode, Description, MaterialType, \" +\n            \"BaseUOM, Status, LastModified \" +\n            \"FROM Materials WHERE LastModified > :LastModified\",\n            params\n        );\n    }\n    \n    private BatchResult processBatch(DataTable materials, String source) \n            throws Throwable {\n        BatchResult result = new BatchResult();\n        \n        for (int i = 0; i < materials.getRowCount(); i++) {\n            result.processed++;\n            \n            try {\n                // Get material data\n                String materialCode = materials.getValue(i, \"MaterialCode\");\n                \n                // Find existing material\n                MM_Material material = findMaterial(materialCode);\n                boolean isNew = (material == null);\n                \n                if (isNew) {\n                    material = new MM_Material();\n                    material.setMaterialCode(materialCode);\n                }\n                \n                // Map fields\n                mapFields(material, materials, i);\n                \n                // Validate\n                validateMaterial(material);\n                \n                // Save\n                saveDataObject(material);\n                \n                // Log success\n                logSync(source, materialCode, \"SUCCESS\", null);\n                result.success++;\n                \n            } catch (Throwable e) {\n                // Log error\n                logSync(source, materials.getValue(i, \"MaterialCode\"),\n                    \"ERROR\", e.getMessage());\n                result.errors++;\n            }\n        }\n        \n        return result;\n    }\n    \n    private MM_Material findMaterial(String materialCode) throws Throwable {\n        String sql = \"SELECT OID FROM EMM_Material WHERE MaterialCode = ?\";\n        Object oid = executeScalar(sql, new Object[]{materialCode});\n        \n        if (oid != null) {\n            return loadDataObject(\"MM_Material\", ((Number)oid).longValue());\n        }\n        return null;\n    }\n    \n    private void mapFields(MM_Material material, DataTable source, int row) \n            throws Throwable {\n        material.setDescription(source.getValue(row, \"Description\"));\n        material.setMaterialType(mapMaterialType(\n            source.getValue(row, \"MaterialType\")));\n        material.setBaseUOM(mapUOM(source.getValue(row, \"BaseUOM\")));\n        material.setStatus(mapStatus(source.getValue(row, \"Status\")));\n        material.setLastSyncTime(getCurrentTime());\n    }\n    \n    private String mapMaterialType(String externalType) throws Throwable {\n        // Get mapping configuration\n        String sql = \"SELECT InternalValue FROM EMM_TypeMapping \" +\n            \"WHERE ExternalSystem = ? AND ExternalValue = ?\";\n        return executeScalar(sql, \n            new Object[]{\"MaterialType\", externalType}).toString();\n    }\n    \n    private String mapUOM(String externalUOM) throws Throwable {\n        String sql = \"SELECT InternalValue FROM EMM_TypeMapping \" +\n            \"WHERE ExternalSystem = ? AND ExternalValue = ?\";\n        return executeScalar(sql, \n            new Object[]{\"UOM\", externalUOM}).toString();\n    }\n    \n    private String mapStatus(String externalStatus) throws Throwable {\n        String sql = \"SELECT InternalValue FROM EMM_TypeMapping \" +\n            \"WHERE ExternalSystem = ? AND ExternalValue = ?\";\n        return executeScalar(sql, \n            new Object[]{\"Status\", externalStatus}).toString();\n    }\n    \n    private void validateMaterial(MM_Material material) throws Throwable {\n        // Basic validation\n        if (StringUtil.isEmpty(material.getMaterialCode())) {\n            throw new ValidationException(\"MaterialCode is required\");\n        }\n        if (StringUtil.isEmpty(material.getDescription())) {\n            throw new ValidationException(\"Description is required\");\n        }\n        if (StringUtil.isEmpty(material.getMaterialType())) {\n            throw new ValidationException(\"MaterialType is required\");\n        }\n        if (StringUtil.isEmpty(material.getBaseUOM())) {\n            throw new ValidationException(\"BaseUOM is required\");\n        }\n        \n        // Business rules\n        String sql = \"SELECT 1 FROM EMM_MaterialType WHERE TypeCode = ?\";\n        if (executeScalar(sql, new Object[]{material.getMaterialType()}) == null) {\n            throw new ValidationException(\"Invalid MaterialType\");\n        }\n        \n        sql = \"SELECT 1 FROM EMM_UnitOfMeasure WHERE UOMCode = ?\";\n        if (executeScalar(sql, new Object[]{material.getBaseUOM()}) == null) {\n            throw new ValidationException(\"Invalid BaseUOM\");\n        }\n    }\n    \n    private void logSync(String source, String materialCode, \n            String status, String error) throws Throwable {\n        executeUpdate(\n            \"INSERT INTO \" + SYNC_LOG_TABLE + \n            \" (Source, MaterialCode, SyncTime, Status, ErrorMessage) \" +\n            \"VALUES (?, ?, ?, ?, ?)\",\n            new Object[]{source, materialCode, getCurrentTime(), status, error}\n        );\n    }\n    \n    private void updateSyncStatus(String source, Date syncTime,\n            int processed, int success, int errors) throws Throwable {\n        executeUpdate(\n            \"INSERT INTO EMM_MaterialSyncStatus \" +\n            \"(Source, LastSyncTime, TotalProcessed, TotalSuccess, TotalErrors) \" +\n            \"VALUES (?, ?, ?, ?, ?)\",\n            new Object[]{source, syncTime, processed, success, errors}\n        );\n    }\n    \n    private void generateSyncReport(String source, int processed, \n            int success, int errors) throws Throwable {\n        // Create report content\n        StringBuilder report = new StringBuilder();\n        report.append(\"Material Sync Report\n\");\n        report.append(\"==================\n\");\n        report.append(String.format(\"Source: %s\n\", source));\n        report.append(String.format(\"Sync Time: %s\n\", getCurrentTime()));\n        report.append(String.format(\"Total Processed: %d\n\", processed));\n        report.append(String.format(\"Success: %d\n\", success));\n        report.append(String.format(\"Errors: %d\n\", errors));\n        \n        if (errors > 0) {\n            report.append(\"\nError Details:\n\");\n            String sql = \"SELECT MaterialCode, ErrorMessage FROM \" + \n                SYNC_LOG_TABLE + \" WHERE Source = ? AND Status = 'ERROR' \" +\n                \"AND SyncTime >= ?\";\n            DataTable errorLog = executeQuery(sql, \n                new Object[]{source, getCurrentTime().addHours(-1)});\n            \n            for (int i = 0; i < errorLog.getRowCount(); i++) {\n                report.append(String.format(\"- %s: %s\n\",\n                    errorLog.getValue(i, \"MaterialCode\"),\n                    errorLog.getValue(i, \"ErrorMessage\")));\n            }\n        }\n        \n        // Save report\n        String reportPath = String.format(\"reports/material_sync_%s_%s.txt\",\n            source, DateUtil.format(getCurrentTime(), \"yyyyMMdd_HHmmss\"));\n        saveReport(reportPath, report.toString());\n    }\n    \n    private class BatchResult {\n        int processed = 0;\n        int success = 0;\n        int errors = 0;\n    }\n}"
    },
    {
    "instruction": "Create a system monitoring dashboard configuration",
    "input": "Define an XML configuration for a system monitoring dashboard that displays real-time metrics, alerts, and system health status.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DashboardConfig Key=\"SystemMonitoring\" Caption=\"System Monitoring Dashboard\" RefreshInterval=\"60\">\n    <Layout Type=\"Grid\" Columns=\"3\">\n        <Section Key=\"SystemHealth\" Caption=\"System Health\" ColumnSpan=\"3\">\n            <Widget Type=\"StatusPanel\">\n                <Metrics>\n                    <Metric Key=\"CPU\" Caption=\"CPU Usage\" Type=\"Gauge\">\n                        <DataSource>\n                            <Query>SELECT AVG(CPUUsage) FROM EGS_SystemMetrics WHERE TimeStamp >= {NOW-5M}</Query>\n                            <Warning>70</Warning>\n                            <Critical>90</Critical>\n                        </DataSource>\n                    </Metric>\n                    <Metric Key=\"Memory\" Caption=\"Memory Usage\" Type=\"Gauge\">\n                        <DataSource>\n                            <Query>SELECT AVG(MemoryUsage) FROM EGS_SystemMetrics WHERE TimeStamp >= {NOW-5M}</Query>\n                            <Warning>80</Warning>\n                            <Critical>95</Critical>\n                        </DataSource>\n                    </Metric>\n                    <Metric Key=\"DBConnections\" Caption=\"DB Connections\" Type=\"Gauge\">\n                        <DataSource>\n                            <Query>SELECT COUNT(*) FROM V$SESSION WHERE TYPE = 'USER'</Query>\n                            <Warning>80</Warning>\n                            <Critical>100</Critical>\n                        </DataSource>\n                    </Metric>\n                </Metrics>\n            </Widget>\n        </Section>\n        \n        <Section Key=\"Performance\" Caption=\"Performance Metrics\">\n            <Widget Type=\"LineChart\">\n                <DataSource>\n                    <Query>\n                        SELECT TimeStamp, ResponseTime, ThroughPut \n                        FROM EGS_PerformanceMetrics \n                        WHERE TimeStamp >= {NOW-1H}\n                        ORDER BY TimeStamp\n                    </Query>\n                    <RefreshInterval>30</RefreshInterval>\n                </DataSource>\n                <Series>\n                    <Line Key=\"ResponseTime\" Caption=\"Avg Response Time (ms)\" Color=\"#FF4444\" />\n                    <Line Key=\"ThroughPut\" Caption=\"Transactions/sec\" Color=\"#44FF44\" />\n                </Series>\n            </Widget>\n        </Section>\n        \n        <Section Key=\"ActiveUsers\" Caption=\"Active Users\">\n            <Widget Type=\"CounterGrid\">\n                <DataSource>\n                    <Query>\n                        SELECT ModuleKey, COUNT(*) as UserCount \n                        FROM EGS_ActiveSessions \n                        WHERE LastActiveTime >= {NOW-5M}\n                        GROUP BY ModuleKey\n                    </Query>\n                </DataSource>\n                <Columns>\n                    <Column Key=\"ModuleKey\" Caption=\"Module\" />\n                    <Column Key=\"UserCount\" Caption=\"Active Users\" />\n                </Columns>\n            </Widget>\n        </Section>\n        \n        <Section Key=\"Alerts\" Caption=\"Recent Alerts\">\n            <Widget Type=\"AlertList\">\n                <DataSource>\n                    <Query>\n                        SELECT AlertTime, Severity, Message \n                        FROM EGS_SystemAlerts \n                        WHERE AlertTime >= {NOW-24H}\n                        ORDER BY AlertTime DESC\n                    </Query>\n                </DataSource>\n                <Display>\n                    <MaxItems>50</MaxItems>\n                    <GroupBy>Severity</GroupBy>\n                    <ColorCoding>\n                        <Level Value=\"ERROR\" Color=\"#FF0000\" />\n                        <Level Value=\"WARNING\" Color=\"#FFA500\" />\n                        <Level Value=\"INFO\" Color=\"#00FF00\" />\n                    </ColorCoding>\n                </Display>\n            </Widget>\n        </Section>\n    </Layout>\n    \n    <ExportConfig>\n        <Format>PDF</Format>\n        <Schedule>\n            <Daily>08:00</Daily>\n        </Schedule>\n        <Recipients>\n            <Role>SYSTEM_ADMIN</Role>\n            <Role>IT_MANAGER</Role>\n        </Recipients>\n    </ExportConfig>\n</DashboardConfig>"
    },
    {
    "instruction": "Create a formula for generating system health report",
    "input": "Implement a formula class that generates comprehensive system health report including performance metrics, error logs, and resource utilization statistics.",
    "output": "package com.company.erp.basis.formula;\n\npublic class SystemHealthReportFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        // Get parameters\n        Date startDate = getParameterDate(\"StartDate\");\n        Date endDate = getParameterDate(\"EndDate\");\n        String reportFormat = getParameterString(\"Format\");\n        \n        try {\n            // 1. Collect system metrics\n            DataTable systemMetrics = collectSystemMetrics(startDate, endDate);\n            \n            // 2. Analyze performance data\n            DataTable performanceStats = analyzePerformance(startDate, endDate);\n            \n            // 3. Analyze error logs\n            DataTable errorAnalysis = analyzeErrorLogs(startDate, endDate);\n            \n            // 4. Generate report\n            String report = generateReport(systemMetrics, performanceStats, errorAnalysis);\n            \n            // 5. Export report\n            String fileName = String.format(\"SystemHealth_%s.%s\",\n                DateUtil.format(getCurrentTime(), \"yyyyMMdd\"),\n                reportFormat.toLowerCase());\n                \n            exportReport(report, fileName, reportFormat);\n            \n            // 6. Send notifications if there are critical issues\n            checkAndNotifyCriticalIssues(systemMetrics, errorAnalysis);\n            \n        } catch (Throwable e) {\n            logError(\"Failed to generate system health report\", e);\n            throw e;\n        }\n    }\n    \n    private DataTable collectSystemMetrics(Date startDate, Date endDate) \n            throws Throwable {\n        String sql = \"\"\"\n            SELECT \n                TRUNC(TimeStamp, 'HH') as TimeSlot,\n                AVG(CPUUsage) as AvgCPU,\n                MAX(CPUUsage) as MaxCPU,\n                AVG(MemoryUsage) as AvgMemory,\n                MAX(MemoryUsage) as MaxMemory,\n                AVG(DiskUsage) as AvgDisk,\n                AVG(ActiveSessions) as AvgSessions\n            FROM EGS_SystemMetrics\n            WHERE TimeStamp BETWEEN ? AND ?\n            GROUP BY TRUNC(TimeStamp, 'HH')\n            ORDER BY TimeSlot\n        \"\"\";\n        \n        return executeQuery(sql, new Object[]{startDate, endDate});\n    }\n    \n    private DataTable analyzePerformance(Date startDate, Date endDate) \n            throws Throwable {\n        String sql = \"\"\"\n            SELECT \n                ModuleKey,\n                COUNT(*) as TotalTx,\n                AVG(ResponseTime) as AvgResponse,\n                MAX(ResponseTime) as MaxResponse,\n                COUNT(CASE WHEN ResponseTime > 5000 THEN 1 END) as SlowTx\n            FROM EGS_TransactionLog\n            WHERE LogTime BETWEEN ? AND ?\n            GROUP BY ModuleKey\n            ORDER BY AvgResponse DESC\n        \"\"\";\n        \n        return executeQuery(sql, new Object[]{startDate, endDate});\n    }\n    \n    private DataTable analyzeErrorLogs(Date startDate, Date endDate) \n            throws Throwable {\n        String sql = \"\"\"\n            SELECT \n                ErrorType,\n                COUNT(*) as ErrorCount,\n                MIN(LogTime) as FirstOccurrence,\n                MAX(LogTime) as LastOccurrence,\n                COUNT(DISTINCT UserID) as AffectedUsers\n            FROM EGS_ErrorLog\n            WHERE LogTime BETWEEN ? AND ?\n            GROUP BY ErrorType\n            HAVING COUNT(*) > 10\n            ORDER BY ErrorCount DESC\n        \"\"\";\n        \n        return executeQuery(sql, new Object[]{startDate, endDate});\n    }\n    \n    private String generateReport(DataTable systemMetrics, \n            DataTable performanceStats, DataTable errorAnalysis) throws Throwable {\n        StringBuilder report = new StringBuilder();\n        \n        // 1. Executive Summary\n        report.append(\"System Health Report\\n\");\n        report.append(\"===================\\n\\n\");\n        report.append(String.format(\"Report Generated: %s\\n\\n\", \n            DateUtil.format(getCurrentTime(), \"yyyy-MM-dd HH:mm:ss\")));\n            \n        // 2. System Metrics Summary\n        report.append(\"System Resource Utilization\\n\");\n        report.append(\"-------------------------\\n\");\n        addSystemMetricsSummary(report, systemMetrics);\n        \n        // 3. Performance Analysis\n        report.append(\"\\nPerformance Analysis\\n\");\n        report.append(\"-------------------\\n\");\n        addPerformanceAnalysis(report, performanceStats);\n        \n        // 4. Error Analysis\n        report.append(\"\\nError Analysis\\n\");\n        report.append(\"-------------\\n\");\n        addErrorAnalysis(report, errorAnalysis);\n        \n        // 5. Recommendations\n        report.append(\"\\nRecommendations\\n\");\n        report.append(\"---------------\\n\");\n        addRecommendations(report, systemMetrics, performanceStats, errorAnalysis);\n        \n        return report.toString();\n    }\n    \n    private void addSystemMetricsSummary(StringBuilder report, DataTable metrics) {\n        BigDecimal maxCPU = BigDecimal.ZERO;\n        BigDecimal maxMemory = BigDecimal.ZERO;\n        \n        for (int i = 0; i < metrics.getRowCount(); i++) {\n            maxCPU = maxCPU.max(metrics.getValue(i, \"MaxCPU\"));\n            maxMemory = maxMemory.max(metrics.getValue(i, \"MaxMemory\"));\n        }\n        \n        report.append(String.format(\"Peak CPU Usage: %.1f%%\\n\", maxCPU));\n        report.append(String.format(\"Peak Memory Usage: %.1f%%\\n\", maxMemory));\n        \n        if (maxCPU.compareTo(new BigDecimal(\"90\")) > 0) {\n            report.append(\"WARNING: CPU usage exceeded 90%\\n\");\n        }\n        if (maxMemory.compareTo(new BigDecimal(\"85\")) > 0) {\n            report.append(\"WARNING: Memory usage exceeded 85%\\n\");\n        }\n    }\n    \n    private void addPerformanceAnalysis(StringBuilder report, DataTable stats) {\n        int slowModules = 0;\n        \n        report.append(\"\\nModule Performance Summary:\\n\");\n        for (int i = 0; i < stats.getRowCount(); i++) {\n            String module = stats.getValue(i, \"ModuleKey\");\n            BigDecimal avgResponse = stats.getValue(i, \"AvgResponse\");\n            int slowTx = stats.getValue(i, \"SlowTx\");\n            \n            if (avgResponse.compareTo(new BigDecimal(\"2000\")) > 0) {\n                slowModules++;\n                report.append(String.format(\"- %s: Avg Response Time %.1fms \", \n                    module, avgResponse));\n                report.append(String.format(\"(Slow Transactions: %d)\\n\", slowTx));\n            }\n        }\n        \n        if (slowModules == 0) {\n            report.append(\"All modules performing within acceptable limits.\\n\");\n        }\n    }\n    \n    private void addErrorAnalysis(StringBuilder report, DataTable errors) {\n        int totalErrors = 0;\n        \n        report.append(\"\\nTop Error Types:\\n\");\n        for (int i = 0; i < errors.getRowCount(); i++) {\n            String errorType = errors.getValue(i, \"ErrorType\");\n            int count = errors.getValue(i, \"ErrorCount\");\n            int users = errors.getValue(i, \"AffectedUsers\");\n            \n            totalErrors += count;\n            report.append(String.format(\"- %s: %d occurrences \", errorType, count));\n            report.append(String.format(\"(Affected Users: %d)\\n\", users));\n        }\n        \n        report.append(String.format(\"\\nTotal Errors: %d\\n\", totalErrors));\n    }\n    \n    private void addRecommendations(StringBuilder report, \n            DataTable metrics, DataTable performance, DataTable errors) {\n        // CPU recommendations\n        BigDecimal maxCPU = getMaxValue(metrics, \"MaxCPU\");\n        if (maxCPU.compareTo(new BigDecimal(\"80\")) > 0) {\n            report.append(\"1. Consider CPU capacity upgrade or load balancing\\n\");\n        }\n        \n        // Memory recommendations\n        BigDecimal maxMemory = getMaxValue(metrics, \"MaxMemory\");\n        if (maxMemory.compareTo(new BigDecimal(\"80\")) > 0) {\n            report.append(\"2. Increase system memory or optimize memory usage\\n\");\n        }\n        \n        // Performance recommendations\n        int slowModules = countSlowModules(performance);\n        if (slowModules > 0) {\n            report.append(\"3. Review and optimize slow performing modules\\n\");\n        }\n        \n        // Error handling recommendations\n        if (errors.getRowCount() > 0) {\n            report.append(\"4. Implement error monitoring for frequent issues\\n\");\n        }\n    }\n    \n    private void exportReport(String content, String fileName, String format) \n            throws Throwable {\n        // Export based on format\n        switch (format.toUpperCase()) {\n            case \"PDF\":\n                exportToPDF(content, fileName);\n                break;\n            case \"HTML\":\n                exportToHTML(content, fileName);\n                break;\n            default:\n                exportToText(content, fileName);\n        }\n    }\n    \n    private void checkAndNotifyCriticalIssues(DataTable metrics, \n            DataTable errors) throws Throwable {\n        // Check for critical conditions\n        boolean hasCriticalIssues = false;\n        StringBuilder message = new StringBuilder();\n        \n        // Check system metrics\n        BigDecimal maxCPU = getMaxValue(metrics, \"MaxCPU\");\n        BigDecimal maxMemory = getMaxValue(metrics, \"MaxMemory\");\n        \n        if (maxCPU.compareTo(new BigDecimal(\"95\")) > 0) {\n            hasCriticalIssues = true;\n            message.append(\"Critical: CPU usage exceeded 95%\\n\");\n        }\n        \n        if (maxMemory.compareTo(new BigDecimal(\"90\")) > 0) {\n            hasCriticalIssues = true;\n            message.append(\"Critical: Memory usage exceeded 90%\\n\");\n        }\n        \n        // Check error frequency\n        int totalErrors = 0;\n        for (int i = 0; i < errors.getRowCount(); i++) {\n            totalErrors += errors.getValue(i, \"ErrorCount\");\n        }\n        \n        if (totalErrors > 1000) {\n            hasCriticalIssues = true;\n            message.append(\"Critical: High error rate detected\\n\");\n        }\n        \n        // Send notification if there are critical issues\n        if (hasCriticalIssues) {\n            sendNotification(\"SYSTEM_ALERT\", message.toString(), \"HIGH\");\n        }\n    }\n    \n    private BigDecimal getMaxValue(DataTable table, String column) {\n        BigDecimal max = BigDecimal.ZERO;\n        for (int i = 0; i < table.getRowCount(); i++) {\n            max = max.max(table.getValue(i, column));\n        }\n        return max;\n    }\n    \n    private int countSlowModules(DataTable performance) {\n        int count = 0;\n        for (int i = 0; i < performance.getRowCount(); i++) {\n            if (performance.getValue(i, \"AvgResponse\")\n                    .compareTo(new BigDecimal(\"2000\")) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"
    },
    {
    "instruction": "Create a financial report configuration",
    "input": "Define an XML configuration for a financial report that includes balance sheet, income statement, and cash flow with proper grouping and calculations.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ReportConfig Key=\"FI_FinancialStatement\" Caption=\"Financial Statement Report\">\n    [... rest of XML content with proper escaping ...]"
    },
    {
    "instruction": "Create an analytics formula for sales trend analysis",
    "input": "Implement a formula class that analyzes sales trends, including period-over-period comparison, growth rates, and seasonality detection.",
    "output": "package com.company.erp.sd.formula;\n\npublic class SalesTrendAnalysisFormula extends EntityContextAction {\n    [... rest of Java code with proper escaping ...]\n}"
    },
    {
    "instruction": "Create a workflow automation configuration",
    "input": "Define an XML configuration for automating purchase requisition to purchase order workflow with proper approvals and notifications.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowConfig Key=\"PR_TO_PO\" Caption=\"PR to PO Automation\">\n    [... rest of XML content ...]\n</WorkflowConfig>"
    },
    {
    "instruction": "Implement data archiving formula",
    "input": "Create a formula class for archiving historical transaction data with proper filtering, compression and audit logging.",
    "output": "package com.company.erp.basis.formula;\n\npublic class DataArchiveFormula extends EntityContextAction {\n    [... rest of Java code ...]\n}"
    },
    {
    "instruction": "Create a workflow configuration with advanced approval routing",
    "input": "Define an XML workflow configuration for capital expenditure approval that includes multi-level approvals, dynamic routing based on amount thresholds, and delegation rules.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WorkflowConfig Key=\"FI_CapitalExpenditure\" Caption=\"Capital Expenditure Approval\">\n    <StatusFlow InitialStatus=\"DRAFT\">\n        <Status Key=\"DRAFT\" Caption=\"Draft\">\n            <NextStatus Key=\"PENDING\" Action=\"Submit\">\n                <ValidationRules>\n                    <Rule Formula=\"FI_CapexValidationFormula\" />\n                </ValidationRules>\n            </NextStatus>\n            <NextStatus Key=\"CANCELLED\" Action=\"Cancel\" />\n        </Status>\n        <Status Key=\"PENDING\" Caption=\"Under Review\">\n            <NextStatus Key=\"APPROVED\" Action=\"Approve\">\n                <RequiredApprovals>ALL</RequiredApprovals>\n            </NextStatus>\n            <NextStatus Key=\"REJECTED\" Action=\"Reject\" />\n            <NextStatus Key=\"REVISION\" Action=\"RequestRevision\" />\n        </Status>\n        <Status Key=\"REVISION\" Caption=\"Revision Required\">\n            <NextStatus Key=\"PENDING\" Action=\"Resubmit\" />\n            <NextStatus Key=\"CANCELLED\" Action=\"Cancel\" />\n        </Status>\n        <Status Key=\"APPROVED\" Caption=\"Approved\" IsFinal=\"true\" />\n        <Status Key=\"REJECTED\" Caption=\"Rejected\" IsFinal=\"true\" />\n        <Status Key=\"CANCELLED\" Caption=\"Cancelled\" IsFinal=\"true\" />\n    </StatusFlow>\n    \n    <ApprovalFlow>\n        <DynamicRouting>\n            <Level Key=\"L1\" Caption=\"Department Manager\">\n                <Condition><![CDATA[Amount <= 10000 AND Currency = 'USD']]></Condition>\n                <Approver Type=\"Role\" Key=\"DEPT_MANAGER\">\n                    <DelegationRules>\n                        <Rule Condition=\"IsOnLeave\" DelegateTo=\"ACTING_MANAGER\" />\n                    </DelegationRules>\n                </Approver>\n                <SLA Days=\"2\" />\n            </Level>\n            <Level Key=\"L2\" Caption=\"Division Director\">\n                <Condition><![CDATA[Amount <= 50000 AND Currency = 'USD']]></Condition>\n                <Approver Type=\"Role\" Key=\"DIV_DIRECTOR\" />\n                <SLA Days=\"3\" />\n            </Level>\n            <Level Key=\"L3\" Caption=\"CFO\">\n                <Condition><![CDATA[Amount <= 200000 AND Currency = 'USD']]></Condition>\n                <Approver Type=\"Role\" Key=\"CFO\">\n                    <DelegationRules>\n                        <Rule Condition=\"IsUnavailable\" DelegateTo=\"ACTING_CFO\" />\n                    </DelegationRules>\n                </Approver>\n                <SLA Days=\"5\" />\n            </Level>\n            <Level Key=\"L4\" Caption=\"Board Approval\">\n                <Condition><![CDATA[Amount > 200000 OR Currency != 'USD']]></Condition>\n                <Approver Type=\"Committee\" Key=\"BOARD_COMMITTEE\">\n                    <QuorumRequired>true</QuorumRequired>\n                    <MinimumApprovers>3</MinimumApprovers>\n                </Approver>\n                <SLA Days=\"10\" />\n            </Level>\n        </DynamicRouting>\n        \n        <ParallelApproval>\n            <Level Key=\"Technical\">\n                <Condition><![CDATA[Category = 'IT_EQUIPMENT']]></Condition>\n                <Approver Type=\"Role\" Key=\"IT_DIRECTOR\" />\n            </Level>\n            <Level Key=\"Compliance\">\n                <Condition><![CDATA[Amount > 100000]]></Condition>\n                <Approver Type=\"Role\" Key=\"COMPLIANCE_OFFICER\" />\n            </Level>\n        </ParallelApproval>\n    </ApprovalFlow>\n    \n    <NotificationConfig>\n        <Event Key=\"StatusChange\">\n            <Notification Key=\"SubmittedForApproval\">\n                <Trigger>Status = 'PENDING'</Trigger>\n                <Template>CAPEX_{DocumentNo}_ApprovalRequest</Template>\n                <Recipients>\n                    <CurrentApprover />\n                    <PreviousApprover />\n                    <Role>FI_CONTROLLER</Role>\n                </Recipients>\n                <Channels>\n                    <Email>true</Email>\n                    <SystemNotification>true</SystemNotification>\n                </Channels>\n            </Notification>\n            <Notification Key=\"ApprovalComplete\">\n                <Trigger>Status = 'APPROVED'</Trigger>\n                <Template>CAPEX_{DocumentNo}_Approved</Template>\n                <Recipients>\n                    <Creator />\n                    <AllApprovers />\n                    <Role>FI_CONTROLLER</Role>\n                </Recipients>\n            </Notification>\n            <Notification Key=\"RejectionAlert\">\n                <Trigger>Status = 'REJECTED'</Trigger>\n                <Template>CAPEX_{DocumentNo}_Rejected</Template>\n                <Recipients>\n                    <Creator />\n                    <Role>FI_CONTROLLER</Role>\n                </Recipients>\n            </Notification>\n        </Event>\n        <Event Key=\"SLABreach\">\n            <Notification Key=\"SLAWarning\">\n                <Trigger>DaysInStatus > SLA * 0.8</Trigger>\n                <Template>CAPEX_{DocumentNo}_SLA_Warning</Template>\n                <Recipients>\n                    <CurrentApprover />\n                    <Role>WORKFLOW_ADMIN</Role>\n                </Recipients>\n            </Notification>\n        </Event>\n    </NotificationConfig>\n    \n    <AuditConfig>\n        <AuditTrail>\n            <Field Key=\"Amount\" />\n            <Field Key=\"Currency\" />\n            <Field Key=\"Category\" />\n            <Field Key=\"Description\" />\n            <Field Key=\"JustificationText\" />\n        </AuditTrail>\n        <ChangeLog>\n            <Status>true</Status>\n            <Approvers>true</Approvers>\n            <Comments>true</Comments>\n        </ChangeLog>\n    </AuditConfig>\n</WorkflowConfig>"
    },
    {
    "instruction": "Create a system configuration for multi-tenant setup",
    "input": "Define an XML configuration for setting up multi-tenant environment including database connections, cache settings, and security configurations.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<SystemConfig Key=\"MultiTenantSetup\" Environment=\"PROD\">\n    <TenantConfig>\n        <TenantResolution>\n            <Strategy>URL</Strategy>\n            <UrlPattern>{tenant}.company.com</UrlPattern>\n            <HeaderName>X-Tenant-ID</HeaderName>\n        </TenantResolution>\n        \n        <DatabaseConfig>\n            <Strategy>SeparateSchema</Strategy>\n            <ConnectionPool>\n                <InitialSize>5</InitialSize>\n                <MaxActive>20</MaxActive>\n                <MaxIdle>10</MaxIdle>\n                <MinIdle>5</MinIdle>\n                <MaxWait>30000</MaxWait>\n            </ConnectionPool>\n            <Templates>\n                <Primary>\n                    <URL>jdbc:oracle:thin:@//db-server:1521/ERPPROD</URL>\n                    <Schema>{tenant}_prod</Schema>\n                    <Credentials>\n                        <User>${ENCRYPTED:DB_USER}</User>\n                        <Password>${ENCRYPTED:DB_PASSWORD}</Password>\n                    </Credentials>\n                </Primary>\n                <Reporting>\n                    <URL>jdbc:oracle:thin:@//report-server:1521/ERPRPT</URL>\n                    <Schema>{tenant}_rpt</Schema>\n                    <ReadOnly>true</ReadOnly>\n                </Reporting>\n            </Templates>\n        </DatabaseConfig>\n        \n        <CacheConfig>\n            <Provider>Redis</Provider>\n            <Strategy>NamespaceIsolation</Strategy>\n            <KeyPattern>{tenant}:{key}</KeyPattern>\n            <ClusterConfig>\n                <Nodes>\n                    <Node Host=\"redis-1.company.com\" Port=\"6379\" />\n                    <Node Host=\"redis-2.company.com\" Port=\"6379\" />\n                    <Node Host=\"redis-3.company.com\" Port=\"6379\" />\n                </Nodes>\n                <Password>${ENCRYPTED:REDIS_PASSWORD}</Password>\n            </ClusterConfig>\n            <Settings>\n                <MaxMemoryPerTenant>1024MB</MaxMemoryPerTenant>\n                <ExpirationPolicy>LRU</ExpirationPolicy>\n                <DefaultTTL>3600</DefaultTTL>\n            </Settings>\n        </CacheConfig>\n        \n        <SecurityConfig>\n            <Authentication>\n                <Provider>OIDC</Provider>\n                <Config>\n                    <Authority>https://auth.company.com</Authority>\n                    <ClientId>{tenant}_client</ClientId>\n                    <ClientSecret>${ENCRYPTED:OIDC_SECRET}</ClientSecret>\n                    <Scopes>openid profile email</Scopes>\n                </Config>\n            </Authentication>\n            \n            <Authorization>\n                <Provider>RBAC</Provider>\n                <RoleMapping>\n                    <Schema>{tenant}_auth</Schema>\n                    <CacheEnabled>true</CacheEnabled>\n                    <CacheTTL>300</CacheTTL>\n                </RoleMapping>\n            </Authorization>\n            \n            <DataIsolation>\n                <Strategy>SchemaLevel</Strategy>\n                <Enforcement>Strict</Enforcement>\n                <Validation>\n                    <CheckTenantID>true</CheckTenantID>\n                    <ValidateClaims>true</ValidateClaims>\n                </Validation>\n            </DataIsolation>\n        </SecurityConfig>\n        \n        <FileStorageConfig>\n            <Provider>S3</Provider>\n            <BucketPattern>{tenant}-files</BucketPattern>\n            <Config>\n                <Region>us-east-1</Region>\n                <AccessKey>${ENCRYPTED:AWS_ACCESS_KEY}</AccessKey>\n                <SecretKey>${ENCRYPTED:AWS_SECRET_KEY}</SecretKey>\n            </Config>\n            <Quotas>\n                <MaxStorageGB>500</MaxStorageGB>\n                <MaxFileSize>100MB</MaxFileSize>\n            </Quotas>\n        </FileStorageConfig>\n    </TenantConfig>\n    \n    <MonitoringConfig>\n        <Metrics>\n            <Prefix>{tenant}</Prefix>\n            <CollectionInterval>60</CollectionInterval>\n            <Tags>\n                <Tag Key=\"environment\" Value=\"prod\" />\n                <Tag Key=\"tenant\" Value=\"{tenant}\" />\n            </Tags>\n        </Metrics>\n        \n        <Logging>\n            <Pattern>%d{ISO8601} [%thread] %X{tenant} %-5level %logger{36} - %msg%n</Pattern>\n            <FilePattern>/logs/{tenant}/%d{yyyy-MM-dd}.log</FilePattern>\n            <RetentionDays>30</RetentionDays>\n        </Logging>\n        \n        <Tracing>\n            <Enabled>true</Enabled>\n            <SampleRate>0.1</SampleRate>\n            <TenantHeader>X-Tenant-ID</TenantHeader>\n        </Tracing>\n    </MonitoringConfig>\n    \n    <ResourceLimits>\n        <Compute>\n            <MaxConcurrentUsers>100</MaxConcurrentUsers>\n            <MaxConcurrentTransactions>50</MaxConcurrentTransactions>\n            <CPUQuota>4</CPUQuota>\n            <MemoryQuotaGB>16</MemoryQuotaGB>\n        </Compute>\n        \n        <Storage>\n            <DatabaseQuotaGB>100</DatabaseQuotaGB>\n            <FileStorageQuotaGB>500</FileStorageQuotaGB>\n            <BackupRetentionDays>30</BackupRetentionDays>\n        </Storage>\n        \n        <API>\n            <RateLimit>1000</RateLimit>\n            <BurstLimit>2000</BurstLimit>\n            <ThrottlingPeriod>60</ThrottlingPeriod>\n        </API>\n    </ResourceLimits>\n</SystemConfig>"
    },
    {
    "instruction": "Create a financial reporting formula",
    "input": "Implement a formula class for generating financial reports that includes balance sheet, income statement, and cash flow calculations with proper accounting rules.",
    "output": "package com.company.erp.fi.formula;\n\npublic class FinancialReportGeneratorFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        // Get report parameters\n        Date reportDate = getParameterDate(\"ReportDate\");\n        String reportType = getParameterString(\"ReportType\");\n        String companyID = getParameterString(\"CompanyID\");\n        \n        // Validate parameters\n        validateParameters(reportDate, reportType, companyID);\n        \n        try {\n            // Generate report based on type\n            switch (reportType) {\n                case \"BS\":\n                    generateBalanceSheet(reportDate, companyID);\n                    break;\n                case \"PL\":\n                    generateIncomeStatement(reportDate, companyID);\n                    break;\n                case \"CF\":\n                    generateCashFlow(reportDate, companyID);\n                    break;\n                default:\n                    throw new BusinessException(\"Invalid report type: \" + reportType);\n            }\n            \n        } catch (Throwable e) {\n            logError(\"Report generation failed\", e);\n            throw e;\n        }\n    }\n    \n    private void generateBalanceSheet(Date reportDate, String companyID) throws Throwable {\n        DataTable balanceSheet = new DataTable();\n        balanceSheet.addColumn(\"AccountCode\", DataType.STRING);\n        balanceSheet.addColumn(\"AccountName\", DataType.STRING);\n        balanceSheet.addColumn(\"Amount\", DataType.DECIMAL);\n        balanceSheet.addColumn(\"Level\", DataType.INTEGER);\n        \n        // Assets\n        addAccountGroup(balanceSheet, \"1000\", \"Assets\", reportDate, companyID);\n        // Current Assets\n        addAccountGroup(balanceSheet, \"1100\", \"Current Assets\", reportDate, companyID);\n        addAccount(balanceSheet, \"1110\", \"Cash and Equivalents\", reportDate, companyID);\n        addAccount(balanceSheet, \"1120\", \"Accounts Receivable\", reportDate, companyID);\n        addAccount(balanceSheet, \"1130\", \"Inventory\", reportDate, companyID);\n        \n        // Non-current Assets\n        addAccountGroup(balanceSheet, \"1200\", \"Non-current Assets\", reportDate, companyID);\n        addAccount(balanceSheet, \"1210\", \"Fixed Assets\", reportDate, companyID);\n        addAccount(balanceSheet, \"1220\", \"Intangible Assets\", reportDate, companyID);\n        \n        // Liabilities and Equity\n        addAccountGroup(balanceSheet, \"2000\", \"Liabilities and Equity\", reportDate, companyID);\n        // Current Liabilities\n        addAccountGroup(balanceSheet, \"2100\", \"Current Liabilities\", reportDate, companyID);\n        addAccount(balanceSheet, \"2110\", \"Accounts Payable\", reportDate, companyID);\n        addAccount(balanceSheet, \"2120\", \"Short-term Loans\", reportDate, companyID);\n        \n        // Calculate totals\n        calculateTotals(balanceSheet);\n        \n        // Format report\n        formatReport(balanceSheet, \"Balance Sheet\");\n        \n        // Set result\n        setResult(\"BalanceSheet\", balanceSheet);\n    }\n    \n    private void generateIncomeStatement(Date reportDate, String companyID) throws Throwable {\n        DataTable incomeStatement = new DataTable();\n        incomeStatement.addColumn(\"AccountCode\", DataType.STRING);\n        incomeStatement.addColumn(\"AccountName\", DataType.STRING);\n        incomeStatement.addColumn(\"Amount\", DataType.DECIMAL);\n        incomeStatement.addColumn(\"Level\", DataType.INTEGER);\n        \n        // Revenue\n        addAccountGroup(incomeStatement, \"4000\", \"Revenue\", reportDate, companyID);\n        addAccount(incomeStatement, \"4100\", \"Sales Revenue\", reportDate, companyID);\n        addAccount(incomeStatement, \"4200\", \"Other Revenue\", reportDate, companyID);\n        \n        // Cost of Sales\n        addAccountGroup(incomeStatement, \"5000\", \"Cost of Sales\", reportDate, companyID);\n        addAccount(incomeStatement, \"5100\", \"Direct Materials\", reportDate, companyID);\n        addAccount(incomeStatement, \"5200\", \"Direct Labor\", reportDate, companyID);\n        \n        // Operating Expenses\n        addAccountGroup(incomeStatement, \"6000\", \"Operating Expenses\", reportDate, companyID);\n        addAccount(incomeStatement, \"6100\", \"Selling Expenses\", reportDate, companyID);\n        addAccount(incomeStatement, \"6200\", \"Administrative Expenses\", reportDate, companyID);\n        \n        // Calculate profits\n        calculateProfits(incomeStatement);\n        \n        // Format report\n        formatReport(incomeStatement, \"Income Statement\");\n        \n        // Set result\n        setResult(\"IncomeStatement\", incomeStatement);\n    }\n    \n    private void generateCashFlow(Date reportDate, String companyID) throws Throwable {\n        DataTable cashFlow = new DataTable();\n        cashFlow.addColumn(\"ActivityType\", DataType.STRING);\n        cashFlow.addColumn(\"Description\", DataType.STRING);\n        cashFlow.addColumn(\"Amount\", DataType.DECIMAL);\n        \n        // Operating Activities\n        addCashFlowSection(cashFlow, \"Operating Activities\", reportDate, companyID);\n        \n        // Investing Activities\n        addCashFlowSection(cashFlow, \"Investing Activities\", reportDate, companyID);\n        \n        // Financing Activities\n        addCashFlowSection(cashFlow, \"Financing Activities\", reportDate, companyID);\n        \n        // Calculate net cash flow\n        calculateNetCashFlow(cashFlow);\n        \n        // Format report\n        formatCashFlowReport(cashFlow);\n        \n        // Set result\n        setResult(\"CashFlow\", cashFlow);\n    }\n    \n    private void addAccountGroup(DataTable report, String code, String name, \n            Date date, String companyID) throws Throwable {\n        BigDecimal total = getAccountGroupTotal(code, date, companyID);\n        report.addRow(new Object[]{code, name, total, 1});\n    }\n    \n    private void addAccount(DataTable report, String code, String name,\n            Date date, String companyID) throws Throwable {\n        BigDecimal balance = getAccountBalance(code, date, companyID);\n        report.addRow(new Object[]{code, name, balance, 2});\n    }\n    \n    private BigDecimal getAccountBalance(String accountCode, Date date, \n            String companyID) throws Throwable {\n        String sql = \"SELECT SUM(CASE DebitCredit WHEN 'D' THEN Amount \" +\n            \"WHEN 'C' THEN -Amount END) \" +\n            \"FROM EFI_GLEntry WHERE AccountCode = ? \" +\n            \"AND CompanyID = ? AND PostingDate <= ?\";\n            \n        Object balance = executeScalar(sql, \n            new Object[]{accountCode, companyID, date});\n            \n        return (balance != null) ? (BigDecimal)balance : BigDecimal.ZERO;\n    }\n    \n    private BigDecimal getAccountGroupTotal(String groupCode, Date date,\n            String companyID) throws Throwable {\n        String sql = \"SELECT SUM(CASE DebitCredit WHEN 'D' THEN Amount \" +\n            \"WHEN 'C' THEN -Amount END) \" +\n            \"FROM EFI_GLEntry e \" +\n            \"JOIN EFI_Account a ON e.AccountCode = a.AccountCode \" +\n            \"WHERE a.GroupCode = ? \" +\n            \"AND e.CompanyID = ? AND e.PostingDate <= ?\";\n            \n        Object total = executeScalar(sql, \n            new Object[]{groupCode, companyID, date});\n            \n        return (total != null) ? (BigDecimal)total : BigDecimal.ZERO;\n    }\n    \n    private void calculateTotals(DataTable report) {\n        BigDecimal totalAssets = BigDecimal.ZERO;\n        BigDecimal totalLiabilities = BigDecimal.ZERO;\n        BigDecimal totalEquity = BigDecimal.ZERO;\n        \n        for (int i = 0; i < report.getRowCount(); i++) {\n            String code = report.getValue(i, \"AccountCode\").toString();\n            BigDecimal amount = report.getValue(i, \"Amount\");\n            \n            if (code.startsWith(\"1\")) {\n                totalAssets = totalAssets.add(amount);\n            } else if (code.startsWith(\"2\")) {\n                if (code.startsWith(\"20\")) {\n                    totalEquity = totalEquity.add(amount);\n                } else {\n                    totalLiabilities = totalLiabilities.add(amount);\n                }\n            }\n        }\n        \n        // Add totals\n        report.addRow(new Object[]{\"1000\", \"Total Assets\", totalAssets, 0});\n        report.addRow(new Object[]{\"2000\", \"Total Liabilities\", totalLiabilities, 0});\n        report.addRow(new Object[]{\"2000\", \"Total Equity\", totalEquity, 0});\n    }\n    \n    private void calculateProfits(DataTable report) {\n        BigDecimal revenue = BigDecimal.ZERO;\n        BigDecimal costOfSales = BigDecimal.ZERO;\n        BigDecimal expenses = BigDecimal.ZERO;\n        \n        for (int i = 0; i < report.getRowCount(); i++) {\n            String code = report.getValue(i, \"AccountCode\").toString();\n            BigDecimal amount = report.getValue(i, \"Amount\");\n            \n            if (code.startsWith(\"4\")) {\n                revenue = revenue.add(amount);\n            } else if (code.startsWith(\"5\")) {\n                costOfSales = costOfSales.add(amount);\n            } else if (code.startsWith(\"6\")) {\n                expenses = expenses.add(amount);\n            }\n        }\n        \n        BigDecimal grossProfit = revenue.subtract(costOfSales);\n        BigDecimal netProfit = grossProfit.subtract(expenses);\n        \n        // Add profits\n        report.addRow(new Object[]{\"GP\", \"Gross Profit\", grossProfit, 0});\n        report.addRow(new Object[]{\"NP\", \"Net Profit\", netProfit, 0});\n    }\n    \n    private void addCashFlowSection(DataTable report, String activityType,\n            Date date, String companyID) throws Throwable {\n        String sql = \"SELECT Description, SUM(Amount) as Amount \" +\n            \"FROM EFI_CashFlow \" +\n            \"WHERE ActivityType = ? AND CompanyID = ? \" +\n            \"AND TransactionDate <= ? \" +\n            \"GROUP BY Description\";\n            \n        DataTable activities = executeQuery(sql,\n            new Object[]{activityType, companyID, date});\n            \n        for (int i = 0; i < activities.getRowCount(); i++) {\n            report.addRow(new Object[]{\n                activityType,\n                activities.getValue(i, \"Description\"),\n                activities.getValue(i, \"Amount\")\n            });\n        }\n    }\n    \n    private void calculateNetCashFlow(DataTable report) {\n        BigDecimal netCashFlow = BigDecimal.ZERO;\n        \n        for (int i = 0; i < report.getRowCount(); i++) {\n            BigDecimal amount = report.getValue(i, \"Amount\");\n            netCashFlow = netCashFlow.add(amount);\n        }\n        \n        report.addRow(new Object[]{\n            \"NET\",\n            \"Net Change in Cash\",\n            netCashFlow\n        });\n    }\n}"
    },
    {
    "instruction": "Create a data conversion formula with validation",
    "input": "Implement a formula class that handles data conversion between different formats (XML, JSON, CSV) with proper validation and error handling.",
    "output": "package com.company.erp.basis.formula;\n\npublic class DataConversionFormula extends EntityContextAction {\n    @Override\n    public void execute() throws Throwable {\n        String sourceFormat = getParameterString(\"SourceFormat\");\n        String targetFormat = getParameterString(\"TargetFormat\");\n        String sourceData = getParameterString(\"SourceData\");\n        \n        try {\n            // 1. Parse source data\n            Object parsedData = parseData(sourceData, sourceFormat);\n            \n            // 2. Validate data structure\n            validateDataStructure(parsedData, sourceFormat);\n            \n            // 3. Convert data\n            String convertedData = convertData(parsedData, targetFormat);\n            \n            // 4. Set result\n            setResult(\"ConvertedData\", convertedData);\n            \n        } catch (DataFormatException e) {\n            logError(\"Data conversion failed\", e);\n            throw new BusinessException(\"Invalid data format: \" + e.getMessage());\n        } catch (Throwable e) {\n            logError(\"Conversion error\", e);\n            throw e;\n        }\n    }\n    \n    private Object parseData(String data, String format) throws Throwable {\n        switch (format.toUpperCase()) {\n            case \"XML\":\n                return parseXML(data);\n            case \"JSON\":\n                return parseJSON(data);\n            case \"CSV\":\n                return parseCSV(data);\n            default:\n                throw new DataFormatException(\"Unsupported format: \" + format);\n        }\n    }\n    \n    private Object parseXML(String xml) throws Throwable {\n        try {\n            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder builder = factory.newDocumentBuilder();\n            return builder.parse(new InputSource(new StringReader(xml)));\n        } catch (Exception e) {\n            throw new DataFormatException(\"Invalid XML: \" + e.getMessage());\n        }\n    }\n    \n    private Object parseJSON(String json) throws Throwable {\n        try {\n            return new JSONObject(json);\n        } catch (Exception e) {\n            throw new DataFormatException(\"Invalid JSON: \" + e.getMessage());\n        }\n    }\n    \n    private Object parseCSV(String csv) throws Throwable {\n        List<String[]> records = new ArrayList<>();\n        try (CSVReader reader = new CSVReader(new StringReader(csv))) {\n            String[] nextLine;\n            while ((nextLine = reader.readNext()) != null) {\n                records.add(nextLine);\n            }\n            return records;\n        } catch (Exception e) {\n            throw new DataFormatException(\"Invalid CSV: \" + e.getMessage());\n        }\n    }\n    \n    private void validateDataStructure(Object data, String format) throws Throwable {\n        switch (format.toUpperCase()) {\n            case \"XML\":\n                validateXMLStructure((Document)data);\n                break;\n            case \"JSON\":\n                validateJSONStructure((JSONObject)data);\n                break;\n            case \"CSV\":\n                validateCSVStructure((List<String[]>)data);\n                break;\n        }\n    }\n    \n    private void validateXMLStructure(Document doc) throws Throwable {\n        // Check root element\n        Element root = doc.getDocumentElement();\n        if (root == null) {\n            throw new DataFormatException(\"Missing root element\");\n        }\n        \n        // Validate against schema if available\n        String schemaPath = getSchemaPath(root.getTagName());\n        if (schemaPath != null) {\n            validateXMLSchema(doc, schemaPath);\n        }\n    }\n    \n    private void validateJSONStructure(JSONObject json) throws Throwable {\n        // Check required fields\n        String[] requiredFields = getRequiredFields(json.optString(\"type\"));\n        if (requiredFields != null) {\n            for (String field : requiredFields) {\n                if (!json.has(field)) {\n                    throw new DataFormatException(\n                        \"Missing required field: \" + field);\n                }\n            }\n        }\n        \n        // Validate data types\n        validateJSONDataTypes(json);\n    }\n    \n    private void validateCSVStructure(List<String[]> records) throws Throwable {\n        if (records.isEmpty()) {\n            throw new DataFormatException(\"Empty CSV data\");\n        }\n        \n        // Get header row\n        String[] header = records.get(0);\n        int columnCount = header.length;\n        \n        // Validate column count consistency\n        for (int i = 1; i < records.size(); i++) {\n            if (records.get(i).length != columnCount) {\n                throw new DataFormatException(\n                    \"Inconsistent column count at row \" + (i + 1));\n            }\n        }\n        \n        // Validate required columns\n        validateCSVColumns(header);\n    }\n    \n    private String convertData(Object data, String targetFormat) throws Throwable {\n        switch (targetFormat.toUpperCase()) {\n            case \"XML\":\n                return convertToXML(data);\n            case \"JSON\":\n                return convertToJSON(data);\n            case \"CSV\":\n                return convertToCSV(data);\n            default:\n                throw new DataFormatException(\n                    \"Unsupported target format: \" + targetFormat);\n        }\n    }\n    \n    private String convertToXML(Object data) throws Throwable {\n        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n        DocumentBuilder builder = factory.newDocumentBuilder();\n        Document doc = builder.newDocument();\n        \n        if (data instanceof JSONObject) {\n            convertJSONToXML((JSONObject)data, doc);\n        } else if (data instanceof List) {\n            convertCSVToXML((List<String[]>)data, doc);\n        }\n        \n        // Convert Document to String\n        TransformerFactory tf = TransformerFactory.newInstance();\n        Transformer transformer = tf.newTransformer();\n        StringWriter writer = new StringWriter();\n        transformer.transform(new DOMSource(doc), new StreamResult(writer));\n        return writer.toString();\n    }\n    \n    private String convertToJSON(Object data) throws Throwable {\n        JSONObject json = new JSONObject();\n        \n        if (data instanceof Document) {\n            convertXMLToJSON((Document)data, json);\n        } else if (data instanceof List) {\n            convertCSVToJSON((List<String[]>)data, json);\n        }\n        \n        return json.toString(2);\n    }\n    \n    private String convertToCSV(Object data) throws Throwable {\n        List<String[]> records = new ArrayList<>();\n        \n        if (data instanceof Document) {\n            convertXMLToCSV((Document)data, records);\n        } else if (data instanceof JSONObject) {\n            convertJSONToCSV((JSONObject)data, records);\n        }\n        \n        // Write CSV\n        StringWriter writer = new StringWriter();\n        CSVWriter csvWriter = new CSVWriter(writer);\n        csvWriter.writeAll(records);\n        csvWriter.close();\n        \n        return writer.toString();\n    }\n    \n    private void convertJSONToXML(JSONObject json, Document doc) throws Throwable {\n        Element root = doc.createElement(\"root\");\n        doc.appendChild(root);\n        \n        for (String key : json.keySet()) {\n            Element element = doc.createElement(key);\n            Object value = json.get(key);\n            \n            if (value instanceof JSONObject) {\n                convertJSONObjectToXML((JSONObject)value, doc, element);\n            } else if (value instanceof JSONArray) {\n                convertJSONArrayToXML((JSONArray)value, doc, element);\n            } else {\n                element.setTextContent(value.toString());\n            }\n            \n            root.appendChild(element);\n        }\n    }\n    \n    private void convertXMLToJSON(Document doc, JSONObject json) \n            throws Throwable {\n        Element root = doc.getDocumentElement();\n        NodeList children = root.getChildNodes();\n        \n        for (int i = 0; i < children.getLength(); i++) {\n            Node node = children.item(i);\n            if (node.getNodeType() == Node.ELEMENT_NODE) {\n                Element element = (Element)node;\n                convertElementToJSON(element, json);\n            }\n        }\n    }\n    \n    private void convertElementToJSON(Element element, JSONObject json) \n            throws Throwable {\n        NodeList children = element.getChildNodes();\n        \n        if (!element.hasChildNodes() || \n            (children.getLength() == 1 && \n             children.item(0).getNodeType() == Node.TEXT_NODE)) {\n            // Simple element with text content\n            json.put(element.getTagName(), element.getTextContent());\n        } else {\n            // Complex element with child elements\n            JSONObject childJson = new JSONObject();\n            for (int i = 0; i < children.getLength(); i++) {\n                Node node = children.item(i);\n                if (node.getNodeType() == Node.ELEMENT_NODE) {\n                    convertElementToJSON((Element)node, childJson);\n                }\n            }\n            json.put(element.getTagName(), childJson);\n        }\n    }\n}"
    },
    {
    "instruction": "Create a configurable reporting template",
    "input": "Define an XML configuration for a flexible report template that supports dynamic columns, grouping, aggregation, and formatting options.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ReportTemplate Key=\"FI_FlexibleReport\" Caption=\"Flexible Financial Report\">\n    <DataSource>\n        <Query>\n            <![CDATA[\n            SELECT {DynamicColumns}\n            FROM {MainTable} m\n            LEFT JOIN {JoinTables}\n            WHERE {Conditions}\n            GROUP BY {GroupBy}\n            ORDER BY {OrderBy}\n            ]]>\n        </Query>\n        <Parameters>\n            <Parameter Key=\"StartDate\" Type=\"Date\" Required=\"true\" />\n            <Parameter Key=\"EndDate\" Type=\"Date\" Required=\"true\" />\n            <Parameter Key=\"CompanyID\" Type=\"String\" Required=\"true\" />\n            <Parameter Key=\"Department\" Type=\"String\" />\n            <Parameter Key=\"Currency\" Type=\"String\" Default=\"USD\" />\n        </Parameters>\n    </DataSource>\n    \n    <ColumnDefinitions>\n        <DynamicColumns>\n            <Column Key=\"AccountGroup\" Type=\"Group\">\n                <Caption>Account Group</Caption>\n                <Width>150</Width>\n                <Aggregation>None</Aggregation>\n                <Format>\n                    <Style>\n                        <Font Bold=\"true\" />\n                        <Background Color=\"#F0F0F0\" />\n                    </Style>\n                </Format>\n            </Column>\n            <Column Key=\"AccountCode\">\n                <Caption>Account Code</Caption>\n                <Width>100</Width>\n                <Format>\n                    <Alignment>Left</Alignment>\n                </Format>\n            </Column>\n            <Column Key=\"Description\">\n                <Caption>Description</Caption>\n                <Width>200</Width>\n                <Format>\n                    <Alignment>Left</Alignment>\n                    <WordWrap>true</WordWrap>\n                </Format>\n            </Column>\n            <Column Key=\"Amount\" Type=\"Calculated\">\n                <Caption>Amount ({Currency})</Caption>\n                <Width>120</Width>\n                <Formula>CASE DebitCredit WHEN 'D' THEN Amount ELSE -Amount END</Formula>\n                <Aggregation>Sum</Aggregation>\n                <Format>\n                    <NumberFormat>#,##0.00</NumberFormat>\n                    <NegativeColor>#FF0000</NegativeColor>\n                    <Alignment>Right</Alignment>\n                </Format>\n            </Column>\n            <Column Key=\"Percentage\" Type=\"Calculated\">\n                <Caption>% of Total</Caption>\n                <Width>80</Width>\n                <Formula>Amount / SUM(Amount) OVER() * 100</Formula>\n                <Format>\n                    <NumberFormat>0.00%</NumberFormat>\n                    <Alignment>Right</Alignment>\n                </Format>\n            </Column>\n        </DynamicColumns>\n    </ColumnDefinitions>\n    \n    <GroupingConfig>\n        <Levels>\n            <Level Key=\"AccountGroup\">\n                <SortOrder>Ascending</SortOrder>\n                <SubTotal>true</SubTotal>\n                <Collapsed>false</Collapsed>\n            </Level>\n        </Levels>\n        <Aggregations>\n            <Total Position=\"Bottom\">\n                <Caption>Grand Total</Caption>\n                <Format>\n                    <Style>\n                        <Font Bold=\"true\" Size=\"11\" />\n                        <Background Color=\"#E0E0E0\" />\n                    </Style>\n                </Format>\n            </Total>\n        </Aggregations>\n    </GroupingConfig>\n    \n    <Visualization>\n        <Charts>\n            <Chart Type=\"Pie\">\n                <Title>Distribution by Account Group</Title>\n                <DataSeries>\n                    <Series>\n                        <XField>AccountGroup</XField>\n                        <YField>Amount</YField>\n                        <ColorScheme>Categorical</ColorScheme>\n                    </Series>\n                </DataSeries>\n                <Legend Position=\"Right\" />\n                <Size>\n                    <Width>600</Width>\n                    <Height>400</Height>\n                </Size>\n            </Chart>\n            <Chart Type=\"Column\">\n                <Title>Amount Trends</Title>\n                <DataSeries>\n                    <Series>\n                        <XField>AccountGroup</XField>\n                        <YField>Amount</YField>\n                        <ColorField>AccountGroup</ColorField>\n                    </Series>\n                </DataSeries>\n                <Axis>\n                    <X>\n                        <Title>Account Groups</Title>\n                        <LabelRotation>45</LabelRotation>\n                    </X>\n                    <Y>\n                        <Title>Amount</Title>\n                        <Format>#,##0.00</Format>\n                    </Y>\n                </Axis>\n            </Chart>\n        </Charts>\n    </Visualization>\n    \n    <ExportOptions>\n        <Formats>\n            <Format Type=\"PDF\">\n                <PageSize>A4</PageSize>\n                <Orientation>Landscape</Orientation>\n                <Margins All=\"20mm\" />\n                <Header>\n                    <Left>{ReportTitle}</Left>\n                    <Center>{CompanyName}</Center>\n                    <Right>Page {PageNumber} of {TotalPages}</Right>\n                </Header>\n                <Footer>\n                    <Left>{CurrentDateTime}</Left>\n                    <Right>Generated by {CurrentUser}</Right>\n                </Footer>\n            </Format>\n            <Format Type=\"Excel\">\n                <SheetName>Financial Data</SheetName>\n                <FreezePane>A2</FreezePane>\n                <AutoFilter>true</AutoFilter>\n                <IncludeCharts>true</IncludeCharts>\n            </Format>\n        </Formats>\n    </ExportOptions>\n</ReportTemplate>"
    },
    {
    "instruction": "Create a data visualization dashboard configuration",
    "input": "Define an XML configuration for an interactive dashboard that includes various chart types, filters, and drill-down capabilities.",
    "output": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<DashboardConfig Key=\"SD_SalesAnalytics\" Caption=\"Sales Analytics Dashboard\">\n    <Layout>\n        <Grid Columns=\"12\" RowHeight=\"80\">\n            <Row>\n                <Cell ColSpan=\"3\">\n                    <Widget Type=\"KPI\" Key=\"TotalSales\">\n                        <Title>Total Sales</Title>\n                        <DataSource>\n                            <Query>\n                                SELECT SUM(Amount) FROM ESD_SalesOrder \n                                WHERE OrderDate BETWEEN {StartDate} AND {EndDate}\n                            </Query>\n                        </DataSource>\n                        <Format>\n                            <NumberFormat>#,##0</NumberFormat>\n                            <Currency>USD</Currency>\n                            <ComparisonPeriod>PreviousPeriod</ComparisonPeriod>\n                            <TrendIndicator>true</TrendIndicator>\n                        </Format>\n                    </Widget>\n                </Cell>\n                <Cell ColSpan=\"3\">\n                    <Widget Type=\"KPI\" Key=\"OrderCount\">\n                        <Title>Total Orders</Title>\n                        <DataSource>\n                            <Query>\n                                SELECT COUNT(*) FROM ESD_SalesOrder \n                                WHERE OrderDate BETWEEN {StartDate} AND {EndDate}\n                            </Query>\n                        </DataSource>\n                        <Format>\n                            <NumberFormat>#,##0</NumberFormat>\n                            <ComparisonPeriod>PreviousPeriod</ComparisonPeriod>\n                            <TrendIndicator>true</TrendIndicator>\n                        </Format>\n                    </Widget>\n                </Cell>\n                <Cell ColSpan=\"3\">\n                    <Widget Type=\"KPI\" Key=\"AverageOrderValue\">\n                        <Title>Average Order Value</Title>\n                        <DataSource>\n                            <Query>\n                                SELECT AVG(Amount) FROM ESD_SalesOrder \n                                WHERE OrderDate BETWEEN {StartDate} AND {EndDate}\n                            </Query>\n                        </DataSource>\n                        <Format>\n                            <NumberFormat>#,##0.00</NumberFormat>\n                            <Currency>USD</Currency>\n                            <ComparisonPeriod>PreviousPeriod</ComparisonPeriod>\n                            <TrendIndicator>true</TrendIndicator>\n                        </Format>\n                    </Widget>\n                </Cell>\n                <Cell ColSpan=\"3\">\n                    <Widget Type=\"KPI\" Key=\"ActiveCustomers\">\n                        <Title>Active Customers</Title>\n                        <DataSource>\n                            <Query>\n                                SELECT COUNT(DISTINCT CustomerID) FROM ESD_SalesOrder \n                                WHERE OrderDate BETWEEN {StartDate} AND {EndDate}\n                            </Query>\n                        </DataSource>\n                        <Format>\n                            <NumberFormat>#,##0</NumberFormat>\n                            <ComparisonPeriod>PreviousPeriod</ComparisonPeriod>\n                            <TrendIndicator>true</TrendIndicator>\n                        </Format>\n                    </Widget>\n                </Cell>\n            </Row>\n            \n            <Row>\n                <Cell ColSpan=\"8\" RowSpan=\"2\">\n                    <Widget Type=\"Chart\" Key=\"SalesTrend\">\n                        <Title>Sales Trend Analysis</Title>\n                        <ChartType>Line</ChartType>\n                        <DataSource>\n                            <Query>\n                                SELECT \n                                    DATE_TRUNC('day', OrderDate) as Date,\n                                    SUM(Amount) as Amount\n                                FROM ESD_SalesOrder \n                                WHERE OrderDate BETWEEN {StartDate} AND {EndDate}\n                                GROUP BY DATE_TRUNC('day', OrderDate)\n                                ORDER BY Date\n                            </Query>\n                        </DataSource>\n                        <Series>\n                            <Line Key=\"Amount\" Color=\"#4CAF50\">\n                                <Marker Enabled=\"true\" Size=\"4\" />\n                                <Tooltip>\n                                    <Format>${Value:#,##0}</Format>\n                                </Tooltip>\n                            </Line>\n                        </Series>\n                        <Axis>\n                            <X>\n                                <Title>Date</Title>\n                                <DateFormat>MM/dd/yyyy</DateFormat>\n                            </X>\n                            <Y>\n                                <Title>Sales Amount</Title>\n                                <Format>${Value:#,##0}</Format>\n                            </Y>\n                        </Axis>\n                        <Legend Position=\"Bottom\" />\n                        <InteractionOptions>\n                            <Zoom>true</Zoom>\n                            <Pan>true</Pan>\n                            <Tooltip>true</Tooltip>\n                        </InteractionOptions>\n                    </Widget>\n                </Cell>\n                \n                <Cell ColSpan=\"4\" RowSpan=\"2\">\n                    <Widget Type=\"Chart\" Key=\"TopProducts\">\n                        <Title>Top Products by Revenue</Title>\n                        <ChartType>Bar</ChartType>\n                        <DataSource>\n                            <Query>\n                                SELECT \n                                    m.MaterialCode,\n                                    m.Description,\n                                    SUM(d.Amount) as Revenue\n                                FROM ESD_SalesOrderDetail d\n                                JOIN EMM_Material m ON d.MaterialID = m.OID\n                                WHERE d.OrderDate BETWEEN {StartDate} AND {EndDate}\n                                GROUP BY m.MaterialCode, m.Description\n                                ORDER BY Revenue DESC\n                                LIMIT 10\n                            </Query>\n                        </DataSource>\n                        <Series>\n                            <Bar Key=\"Revenue\" Color=\"#2196F3\">\n                                <Tooltip>\n                                    <Format>${Value:#,##0}</Format>\n                                </Tooltip>\n                            </Bar>\n                        </Series>\n                        <Axis>\n                            <X>\n                                <Title>Product</Title>\n                            </X>\n                            <Y>\n                                <Title>Revenue</Title>\n                                <Format>${Value:#,##0}</Format>\n                            </Y>\n                        </Axis>\n                        <DrillDown>\n                            <Target>ProductDetails</Target>\n                            <Parameters>\n                                <Parameter Key=\"MaterialCode\" Field=\"MaterialCode\" />\n                            </Parameters>\n                        </DrillDown>\n                    </Widget>\n                </Cell>\n            </Row>\n            \n            <Row>\n                <Cell ColSpan=\"6\">\n                    <Widget Type=\"Chart\" Key=\"SalesByRegion\">\n                        <Title>Sales by Region</Title>\n                        <ChartType>Map</ChartType>\n                        <DataSource>\n                            <Query>\n                                SELECT \n                                    r.RegionCode,\n                                    r.RegionName,\n                                    SUM(s.Amount) as Amount\n                                FROM ESD_SalesOrder s\n                                JOIN ESD_Customer c ON s.CustomerID = c.OID\n                                JOIN EGS_Region r ON c.RegionID = r.OID\n                                WHERE s.OrderDate BETWEEN {StartDate} AND {EndDate}\n                                GROUP BY r.RegionCode, r.RegionName\n                            </Query>\n                        </DataSource>\n                        <MapConfig>\n                            <Type>Choropleth</Type>\n                            <RegionField>RegionCode</RegionField>\n                            <ValueField>Amount</ValueField>\n                            <ColorScale>\n                                <MinColor>#FFFFFF</MinColor>\n                                <MaxColor>#003366</MaxColor>\n                            </ColorScale>\n                            <Tooltip>\n                                <Template>{RegionName}: ${Amount:#,##0}</Template>\n                            </Tooltip>\n                        </MapConfig>\n                    </Widget>\n                </Cell>\n                \n                <Cell ColSpan=\"6\">\n                    <Widget Type=\"Chart\" Key=\"CustomerSegmentation\">\n                        <Title>Customer Segmentation</Title>\n                        <ChartType>Pie</ChartType>\n                        <DataSource>\n                            <Query>\n                                SELECT \n                                    cg.GroupName,\n                                    COUNT(DISTINCT s.CustomerID) as CustomerCount,\n                                    SUM(s.Amount) as TotalAmount\n                                FROM ESD_SalesOrder s\n                                JOIN ESD_CustomerGroup cg ON s.CustomerGroupID = cg.OID\n                                WHERE s.OrderDate BETWEEN {StartDate} AND {EndDate}\n                                GROUP BY cg.GroupName\n                            </Query>\n                        </DataSource>\n                        <Series>\n                            <Pie>\n                                <ValueField>TotalAmount</ValueField>\n                                <LabelField>GroupName</LabelField>\n                                <ColorScheme>Categorical</ColorScheme>\n                            </Pie>\n                        </Series>\n                        <Legend Position=\"Right\" />\n                        <Labels>\n                            <Format>{Label}: ${Value:#,##0}</Format>\n                            <Position>Outside</Position>\n                        </Labels>\n                    </Widget>\n                </Cell>\n            </Row>\n        </Grid>\n    </Layout>\n    \n    <Filters>\n        <Filter Key=\"DateRange\" Type=\"DateRange\">\n            <Caption>Date Range</Caption>\n            <DefaultValue>CurrentMonth</DefaultValue>\n            <PresetRanges>\n                <Range Key=\"CurrentMonth\" Caption=\"Current Month\" />\n                <Range Key=\"LastMonth\" Caption=\"Last Month\" />\n                <Range Key=\"LastQuarter\" Caption=\"Last Quarter\" />\n                <Range Key=\"YTD\" Caption=\"Year to Date\" />\n                <Range Key=\"Custom\" Caption=\"Custom Range\" />\n            </PresetRanges>\n        </Filter>\n        \n        <Filter Key=\"CustomerGroup\" Type=\"MultiSelect\">\n            <Caption>Customer Group</Caption>\n            <DataSource>\n                <Query>\n                    SELECT GroupCode, GroupName \n                    FROM ESD_CustomerGroup \n                    WHERE Status = 'A'\n                </Query>\n            </DataSource>\n            <SelectAll>true</SelectAll>\n        </Filter>\n        \n        <Filter Key=\"ProductCategory\" Type=\"Hierarchy\">\n            <Caption>Product Category</Caption>\n            <DataSource>\n                <Query>\n                    SELECT CategoryID, ParentID, CategoryName \n                    FROM EMM_MaterialCategory \n                    WHERE Status = 'A'\n                </Query>\n            </DataSource>\n            <Levels>\n                <Level Key=\"L1\" Field=\"TopCategory\" />\n                <Level Key=\"L2\" Field=\"SubCategory\" />\n                <Level Key=\"L3\" Field=\"DetailCategory\" />\n            </Levels>\n        </Filter>\n    </Filters>\n    \n    <Interactivity>\n        <DrillDown>\n            <View Key=\"ProductDetails\">\n                <Title>Product Sales Details</Title>\n                <Layout>\n                    <Tabs>\n                        <Tab Key=\"SalesHistory\" Caption=\"Sales History\">\n                            <Widget Type=\"Grid\">\n                                <DataSource>\n                                    <Query>\n                                        SELECT \n                                            s.OrderDate,\n                                            s.DocumentNo,\n                                            c.CustomerName,\n                                            d.Quantity,\n                                            d.UnitPrice,\n                                            d.Amount\n                                        FROM ESD_SalesOrderDetail d\n                                        JOIN ESD_SalesOrder s ON d.POID = s.OID\n                                        JOIN ESD_Customer c ON s.CustomerID = c.OID\n                                        WHERE d.MaterialID = {MaterialID}\n                                        ORDER BY s.OrderDate DESC\n                                    </Query>\n                                </DataSource>\n                            </Widget>\n                        </Tab>\n                        <Tab Key=\"Trends\" Caption=\"Trend Analysis\">\n                            <Widget Type=\"Chart\">\n                                <ChartType>Line</ChartType>\n                                <DataSource>\n                                    <Query>\n                                        SELECT \n                                            DATE_TRUNC('month', s.OrderDate) as Month,\n                                            SUM(d.Quantity) as Quantity,\n                                            SUM(d.Amount) as Amount\n                                        FROM ESD_SalesOrderDetail d\n                                        JOIN ESD_SalesOrder s ON d.POID = s.OID\n                                        WHERE d.MaterialID = {MaterialID}\n                                        GROUP BY DATE_TRUNC('month', s.OrderDate)\n                                        ORDER BY Month\n                                    </Query>\n                                </DataSource>\n                            </Widget>\n                        </Tab>\n                    </Tabs>\n                </Layout>\n            </View>\n        </DrillDown>\n    </Interactivity>\n    \n    <RefreshConfig>\n        <AutoRefresh Interval=\"300\" />\n        <RefreshButton Position=\"TopRight\" />\n    </RefreshConfig>\n</DashboardConfig>"
    }
]